// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package org.matrix.rustcomponents.sdk.crypto

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import uniffi.matrix_sdk_common.FfiConverterTypeShieldStateCode
import uniffi.matrix_sdk_common.ShieldStateCode
import uniffi.matrix_sdk_crypto.FfiConverterTypeLocalTrust
import uniffi.matrix_sdk_crypto.FfiConverterTypeSignatureState
import uniffi.matrix_sdk_crypto.LocalTrust
import uniffi.matrix_sdk_crypto.SignatureState
import uniffi.matrix_sdk_common.RustBuffer as RustBufferShieldStateCode
import uniffi.matrix_sdk_crypto.RustBuffer as RustBufferLocalTrust
import uniffi.matrix_sdk_crypto.RustBuffer as RustBufferSignatureState

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_matrix_sdk_crypto_ffi_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_matrix_sdk_crypto_ffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "matrix_sdk_crypto_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceLoggerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`logLine`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceProgressListenerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`progress`: Int,`total`: Int,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceQrCodeListenerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`state`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSasListenerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`state`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceVerificationRequestListenerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`state`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("log", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceLogger(
    @JvmField internal var `log`: UniffiCallbackInterfaceLoggerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `log`: UniffiCallbackInterfaceLoggerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceLogger(`log`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceLogger) {
        `log` = other.`log`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onProgress", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceProgressListener(
    @JvmField internal var `onProgress`: UniffiCallbackInterfaceProgressListenerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onProgress`: UniffiCallbackInterfaceProgressListenerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceProgressListener(`onProgress`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceProgressListener) {
        `onProgress` = other.`onProgress`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onChange", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceQrCodeListener(
    @JvmField internal var `onChange`: UniffiCallbackInterfaceQrCodeListenerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onChange`: UniffiCallbackInterfaceQrCodeListenerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceQrCodeListener(`onChange`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceQrCodeListener) {
        `onChange` = other.`onChange`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onChange", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceSasListener(
    @JvmField internal var `onChange`: UniffiCallbackInterfaceSasListenerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onChange`: UniffiCallbackInterfaceSasListenerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceSasListener(`onChange`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceSasListener) {
        `onChange` = other.`onChange`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onChange", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceVerificationRequestListener(
    @JvmField internal var `onChange`: UniffiCallbackInterfaceVerificationRequestListenerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onChange`: UniffiCallbackInterfaceVerificationRequestListenerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceVerificationRequestListener(`onChange`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceVerificationRequestListener) {
        `onChange` = other.`onChange`
        `uniffiFree` = other.`uniffiFree`
    }

}






























































































































































































































































































































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "matrix_sdk_crypto_ffi")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                uniffiCallbackInterfaceLogger.register(lib)
                uniffiCallbackInterfaceProgressListener.register(lib)
                uniffiCallbackInterfaceQrCodeListener.register(lib)
                uniffiCallbackInterfaceSasListener.register(lib)
                uniffiCallbackInterfaceVerificationRequestListener.register(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_backupkeys(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_backupkeys(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_backupkeys_backup_version(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_backupkeys_recovery_key(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_backuprecoverykey(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_backuprecoverykey(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_from_base58(`key`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_from_base64(`key`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_from_passphrase(`passphrase`: RustBuffer.ByValue,`salt`: RustBuffer.ByValue,`rounds`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_new_from_passphrase(`passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_decrypt_v1(`ptr`: Pointer,`ephemeralKey`: RustBuffer.ByValue,`mac`: RustBuffer.ByValue,`ciphertext`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_megolm_v1_public_key(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_to_base58(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_to_base64(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_dehydrateddevice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_dehydrateddevice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_dehydrateddevice_keys_for_upload(`ptr`: Pointer,`deviceDisplayName`: RustBuffer.ByValue,`pickleKey`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_dehydrateddevices(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_dehydrateddevices(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_dehydrateddevices_create(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_dehydrateddevices_rehydrate(`ptr`: Pointer,`pickleKey`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`deviceData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_olmmachine(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_olmmachine(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_olmmachine_new(`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_backup_enabled(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_backup_room_keys(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_bootstrap_cross_signing(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_create_encrypted_to_device_request(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`eventType`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_cross_signing_status(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_decrypt_room_event(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,`handleVerificationEvents`: Byte,`strictShields`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_dehydrated_devices(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_device_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_disable_backup(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_discard_room_key(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_enable_backup_v1(`ptr`: Pointer,`key`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_encrypt(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`eventType`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_export_cross_signing_keys(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_export_room_keys(`ptr`: Pointer,`passphrase`: RustBuffer.ByValue,`rounds`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_backup_keys(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_device(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`timeout`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_identity(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`timeout`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_missing_sessions(`ptr`: Pointer,`users`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_only_allow_trusted_devices(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_room_settings(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_user_devices(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`timeout`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_verification(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`flowId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_verification_request(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`flowId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_verification_requests(`ptr`: Pointer,`userId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_identity_keys(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_cross_signing_keys(`ptr`: Pointer,`export`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_decrypted_room_keys(`ptr`: Pointer,`keys`: RustBuffer.ByValue,`progressListener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_room_keys(`ptr`: Pointer,`keys`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,`progressListener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_room_keys_from_backup(`ptr`: Pointer,`keys`: RustBuffer.ByValue,`backupVersion`: RustBuffer.ByValue,`progressListener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_is_identity_verified(`ptr`: Pointer,`userId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_is_user_tracked(`ptr`: Pointer,`userId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_mark_request_as_sent(`ptr`: Pointer,`requestId`: RustBuffer.ByValue,`requestType`: RustBuffer.ByValue,`responseBody`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_outgoing_requests(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_query_missing_secrets_from_other_sessions(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_receive_sync_changes(`ptr`: Pointer,`events`: RustBuffer.ByValue,`deviceChanges`: RustBuffer.ByValue,`keyCounts`: RustBuffer.ByValue,`unusedFallbackKeys`: RustBuffer.ByValue,`nextBatchToken`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_receive_unencrypted_verification_event(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_receive_verification_event(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_room_key(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_self_verification(`ptr`: Pointer,`methods`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_verification(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,`eventId`: RustBuffer.ByValue,`methods`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_verification_with_device(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`methods`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_room_key_counts(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_save_recovery_key(`ptr`: Pointer,`key`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_local_trust(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`trustState`: RustBufferLocalTrust.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_only_allow_trusted_devices(`ptr`: Pointer,`onlyAllowTrustedDevices`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_room_algorithm(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`algorithm`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_room_only_allow_trusted_devices(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`onlyAllowTrustedDevices`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_share_room_key(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`users`: RustBuffer.ByValue,`settings`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_sign(`ptr`: Pointer,`message`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_start_sas_with_device(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_update_tracked_users(`ptr`: Pointer,`users`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_user_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verification_request_content(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`methods`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verify_backup(`ptr`: Pointer,`backupInfo`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verify_device(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verify_identity(`ptr`: Pointer,`userId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_pkencryption(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_pkencryption(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_constructor_pkencryption_from_base64(`key`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_pkencryption_encrypt(`ptr`: Pointer,`plaintext`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_qrcode(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_qrcode(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_cancel(`ptr`: Pointer,`cancelCode`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_cancel_info(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_confirm(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_flow_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_generate_qr_code(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_has_been_scanned(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_is_cancelled(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_is_done(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_other_device_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_other_user_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_reciprocated(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_room_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_set_changes_listener(`ptr`: Pointer,`listener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_state(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_we_started(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_rehydrateddevice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_rehydrateddevice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_rehydrateddevice_receive_events(`ptr`: Pointer,`events`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_sas(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_sas(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_accept(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_cancel(`ptr`: Pointer,`cancelCode`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_confirm(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_flow_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_get_decimals(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_get_emoji_indices(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_is_done(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_other_device_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_other_user_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_room_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_set_changes_listener(`ptr`: Pointer,`listener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_state(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_sas_we_started(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_verification(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_verification(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verification_as_qr(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verification_as_sas(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_clone_verificationrequest(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_matrix_sdk_crypto_ffi_fn_free_verificationrequest(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_accept(`ptr`: Pointer,`methods`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_cancel(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_cancel_info(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_flow_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_cancelled(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_done(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_passive(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_ready(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_other_device_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_other_user_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_our_supported_methods(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_room_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_scan_qr_code(`ptr`: Pointer,`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_set_changes_listener(`ptr`: Pointer,`listener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_start_qr_verification(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_start_sas_verification(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_state(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_their_supported_methods(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_we_started(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_logger(`vtable`: UniffiVTableCallbackInterfaceLogger,
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_progresslistener(`vtable`: UniffiVTableCallbackInterfaceProgressListener,
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_qrcodelistener(`vtable`: UniffiVTableCallbackInterfaceQrCodeListener,
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_saslistener(`vtable`: UniffiVTableCallbackInterfaceSasListener,
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_verificationrequestlistener(`vtable`: UniffiVTableCallbackInterfaceVerificationRequestListener,
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_migrate(`data`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,`progressListener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_migrate_room_settings(`roomSettings`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_migrate_sessions(`data`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,`progressListener`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_set_logger(`logger`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_version(uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_version_info(uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_matrix_sdk_crypto_ffi_fn_func_vodozemac_version(uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_migrate(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_migrate_room_settings(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_migrate_sessions(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_set_logger(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_version(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_version_info(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_func_vodozemac_version(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_backupkeys_backup_version(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_backupkeys_recovery_key(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_decrypt_v1(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_megolm_v1_public_key(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_to_base58(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_to_base64(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_dehydrateddevice_keys_for_upload(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_dehydrateddevices_create(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_dehydrateddevices_rehydrate(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_backup_enabled(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_backup_room_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_bootstrap_cross_signing(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_create_encrypted_to_device_request(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_cross_signing_status(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_decrypt_room_event(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_dehydrated_devices(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_device_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_disable_backup(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_discard_room_key(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_enable_backup_v1(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_encrypt(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_export_cross_signing_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_export_room_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_backup_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_device(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_identity(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_missing_sessions(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_only_allow_trusted_devices(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_room_settings(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_user_devices(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_verification(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_verification_request(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_verification_requests(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_identity_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_cross_signing_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_decrypted_room_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_room_keys(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_room_keys_from_backup(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_is_identity_verified(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_is_user_tracked(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_mark_request_as_sent(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_outgoing_requests(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_query_missing_secrets_from_other_sessions(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_receive_sync_changes(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_receive_unencrypted_verification_event(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_receive_verification_event(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_room_key(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_self_verification(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_verification(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_verification_with_device(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_room_key_counts(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_save_recovery_key(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_local_trust(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_only_allow_trusted_devices(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_room_algorithm(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_room_only_allow_trusted_devices(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_share_room_key(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_sign(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_start_sas_with_device(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_update_tracked_users(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_user_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verification_request_content(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verify_backup(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verify_device(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verify_identity(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_pkencryption_encrypt(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_cancel(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_cancel_info(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_confirm(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_flow_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_generate_qr_code(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_has_been_scanned(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_is_cancelled(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_is_done(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_other_device_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_other_user_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_reciprocated(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_room_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_set_changes_listener(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_state(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_we_started(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_rehydrateddevice_receive_events(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_accept(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_cancel(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_confirm(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_flow_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_get_decimals(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_get_emoji_indices(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_is_done(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_other_device_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_other_user_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_room_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_set_changes_listener(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_state(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_we_started(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verification_as_qr(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verification_as_sas(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_accept(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_cancel(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_cancel_info(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_flow_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_cancelled(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_done(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_passive(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_ready(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_other_device_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_other_user_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_our_supported_methods(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_room_id(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_scan_qr_code(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_set_changes_listener(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_start_qr_verification(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_start_sas_verification(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_state(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_their_supported_methods(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_we_started(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_from_base58(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_from_base64(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_from_passphrase(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_new(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_new_from_passphrase(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_olmmachine_new(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_constructor_pkencryption_from_base64(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_logger_log(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_progresslistener_on_progress(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcodelistener_on_change(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_saslistener_on_change(
    ): Short
    fun uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequestlistener_on_change(
    ): Short
    fun ffi_matrix_sdk_crypto_ffi_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_matrix_sdk_crypto_ffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_migrate() != 42143.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_migrate_room_settings() != 61541.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_migrate_sessions() != 34886.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_set_logger() != 11288.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_version() != 18282.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_version_info() != 38713.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_func_vodozemac_version() != 31430.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_backupkeys_backup_version() != 56634.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_backupkeys_recovery_key() != 59286.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_decrypt_v1() != 63819.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_megolm_v1_public_key() != 54235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_to_base58() != 15954.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_backuprecoverykey_to_base64() != 3854.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_dehydrateddevice_keys_for_upload() != 49513.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_dehydrateddevices_create() != 20431.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_dehydrateddevices_rehydrate() != 16901.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_backup_enabled() != 55573.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_backup_room_keys() != 36224.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_bootstrap_cross_signing() != 16272.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_create_encrypted_to_device_request() != 26155.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_cross_signing_status() != 60700.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_decrypt_room_event() != 22810.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_dehydrated_devices() != 29352.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_device_id() != 8368.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_disable_backup() != 41418.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_discard_room_key() != 51133.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_enable_backup_v1() != 32528.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_encrypt() != 30553.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_export_cross_signing_keys() != 5979.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_export_room_keys() != 20478.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_backup_keys() != 32402.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_device() != 22502.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_identity() != 54772.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_missing_sessions() != 24314.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_only_allow_trusted_devices() != 41002.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_room_settings() != 11972.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_user_devices() != 2357.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_verification() != 26313.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_verification_request() != 52941.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_get_verification_requests() != 22986.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_identity_keys() != 27954.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_cross_signing_keys() != 52001.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_decrypted_room_keys() != 14158.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_room_keys() != 6715.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_import_room_keys_from_backup() != 16588.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_is_identity_verified() != 19282.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_is_user_tracked() != 38133.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_mark_request_as_sent() != 62014.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_outgoing_requests() != 60867.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_query_missing_secrets_from_other_sessions() != 33649.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_receive_sync_changes() != 38842.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_receive_unencrypted_verification_event() != 46523.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_receive_verification_event() != 40029.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_room_key() != 55933.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_self_verification() != 47311.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_verification() != 38259.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_request_verification_with_device() != 2015.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_room_key_counts() != 50492.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_save_recovery_key() != 43674.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_local_trust() != 10978.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_only_allow_trusted_devices() != 5049.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_room_algorithm() != 47962.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_set_room_only_allow_trusted_devices() != 38231.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_share_room_key() != 57647.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_sign() != 11388.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_start_sas_with_device() != 39343.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_update_tracked_users() != 47867.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_user_id() != 28648.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verification_request_content() != 54088.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verify_backup() != 2751.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verify_device() != 57316.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_olmmachine_verify_identity() != 39267.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_pkencryption_encrypt() != 50717.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_cancel() != 56240.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_cancel_info() != 797.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_confirm() != 7766.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_flow_id() != 38858.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_generate_qr_code() != 38303.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_has_been_scanned() != 34711.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_is_cancelled() != 17076.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_is_done() != 64647.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_other_device_id() != 18546.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_other_user_id() != 32903.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_reciprocated() != 29284.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_room_id() != 42325.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_set_changes_listener() != 42360.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_state() != 26065.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcode_we_started() != 39359.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_rehydrateddevice_receive_events() != 55015.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_accept() != 23750.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_cancel() != 32584.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_confirm() != 2955.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_flow_id() != 8039.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_get_decimals() != 6633.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_get_emoji_indices() != 21471.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_is_done() != 23641.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_other_device_id() != 55711.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_other_user_id() != 5587.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_room_id() != 56710.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_set_changes_listener() != 45460.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_state() != 5148.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_sas_we_started() != 20077.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verification_as_qr() != 38638.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verification_as_sas() != 62612.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_accept() != 41324.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_cancel() != 45120.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_cancel_info() != 58718.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_flow_id() != 48899.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_cancelled() != 5406.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_done() != 6301.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_passive() != 29071.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_is_ready() != 46804.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_other_device_id() != 57800.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_other_user_id() != 32763.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_our_supported_methods() != 59504.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_room_id() != 15921.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_scan_qr_code() != 15656.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_set_changes_listener() != 44931.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_start_qr_verification() != 45448.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_start_sas_verification() != 31406.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_state() != 50283.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_their_supported_methods() != 50334.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequest_we_started() != 30926.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_from_base58() != 42204.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_from_base64() != 3338.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_from_passphrase() != 31417.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_new() != 6408.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_backuprecoverykey_new_from_passphrase() != 29227.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_olmmachine_new() != 21121.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_constructor_pkencryption_from_base64() != 23335.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_logger_log() != 3112.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_progresslistener_on_progress() != 49805.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_qrcodelistener_on_change() != 48097.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_saslistener_on_change() != 32441.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_matrix_sdk_crypto_ffi_checksum_method_verificationrequestlistener_on_change() != 9094.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4UL

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
/**
 * Backup keys and information we load from the store.
 */
public interface BackupKeysInterface {
    
    /**
     * Get the backups version that we're holding on to.
     */
    fun `backupVersion`(): kotlin.String
    
    /**
     * Get the recovery key that we're holding on to.
     */
    fun `recoveryKey`(): BackupRecoveryKey
    
    companion object
}

/**
 * Backup keys and information we load from the store.
 */
open class BackupKeys: Disposable, AutoCloseable, BackupKeysInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_backupkeys(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_backupkeys(pointer!!, status)
        }
    }

    
    /**
     * Get the backups version that we're holding on to.
     */override fun `backupVersion`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_backupkeys_backup_version(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the recovery key that we're holding on to.
     */override fun `recoveryKey`(): BackupRecoveryKey {
            return FfiConverterTypeBackupRecoveryKey.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_backupkeys_recovery_key(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeBackupKeys: FfiConverter<BackupKeys, Pointer> {

    override fun lower(value: BackupKeys): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): BackupKeys {
        return BackupKeys(value)
    }

    override fun read(buf: ByteBuffer): BackupKeys {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BackupKeys) = 8UL

    override fun write(value: BackupKeys, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The private part of the backup key, the one used for recovery.
 */
public interface BackupRecoveryKeyInterface {
    
    /**
     * Try to decrypt a message that was encrypted using the public part of the
     * backup key.
     */
    fun `decryptV1`(`ephemeralKey`: kotlin.String, `mac`: kotlin.String, `ciphertext`: kotlin.String): kotlin.String
    
    /**
     * Get the public part of the backup key.
     */
    fun `megolmV1PublicKey`(): MegolmV1BackupKey
    
    /**
     * Convert the recovery key to a base 58 encoded string.
     */
    fun `toBase58`(): kotlin.String
    
    /**
     * Convert the recovery key to a base 64 encoded string.
     */
    fun `toBase64`(): kotlin.String
    
    companion object
}

/**
 * The private part of the backup key, the one used for recovery.
 */
open class BackupRecoveryKey: Disposable, AutoCloseable, BackupRecoveryKeyInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    /**
     * Create a new random [`BackupRecoveryKey`].
     */
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_new(
        _status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_backuprecoverykey(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_backuprecoverykey(pointer!!, status)
        }
    }

    
    /**
     * Try to decrypt a message that was encrypted using the public part of the
     * backup key.
     */
    @Throws(PkDecryptionException::class)override fun `decryptV1`(`ephemeralKey`: kotlin.String, `mac`: kotlin.String, `ciphertext`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(PkDecryptionException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_decrypt_v1(
        it, FfiConverterString.lower(`ephemeralKey`),FfiConverterString.lower(`mac`),FfiConverterString.lower(`ciphertext`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the public part of the backup key.
     */override fun `megolmV1PublicKey`(): MegolmV1BackupKey {
            return FfiConverterTypeMegolmV1BackupKey.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_megolm_v1_public_key(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Convert the recovery key to a base 58 encoded string.
     */override fun `toBase58`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_to_base58(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Convert the recovery key to a base 64 encoded string.
     */override fun `toBase64`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_backuprecoverykey_to_base64(
        it, _status)
}
    }
    )
    }
    

    

    
    companion object {
        
    /**
     * Try to create a [`BackupRecoveryKey`] from a base 58 encoded string.
     */
    @Throws(DecodeException::class) fun `fromBase58`(`key`: kotlin.String): BackupRecoveryKey {
            return FfiConverterTypeBackupRecoveryKey.lift(
    uniffiRustCallWithError(DecodeException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_from_base58(
        FfiConverterString.lower(`key`),_status)
}
    )
    }
    

        
    /**
     * Try to create a [`BackupRecoveryKey`] from a base 64 encoded string.
     */
    @Throws(DecodeException::class) fun `fromBase64`(`key`: kotlin.String): BackupRecoveryKey {
            return FfiConverterTypeBackupRecoveryKey.lift(
    uniffiRustCallWithError(DecodeException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_from_base64(
        FfiConverterString.lower(`key`),_status)
}
    )
    }
    

        
    /**
     * Restore a [`BackupRecoveryKey`] from the given passphrase.
     */ fun `fromPassphrase`(`passphrase`: kotlin.String, `salt`: kotlin.String, `rounds`: kotlin.Int): BackupRecoveryKey {
            return FfiConverterTypeBackupRecoveryKey.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_from_passphrase(
        FfiConverterString.lower(`passphrase`),FfiConverterString.lower(`salt`),FfiConverterInt.lower(`rounds`),_status)
}
    )
    }
    

        
    /**
     * Create a new [`BackupRecoveryKey`] from the given passphrase.
     */ fun `newFromPassphrase`(`passphrase`: kotlin.String): BackupRecoveryKey {
            return FfiConverterTypeBackupRecoveryKey.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_backuprecoverykey_new_from_passphrase(
        FfiConverterString.lower(`passphrase`),_status)
}
    )
    }
    

        
    }
    
}

public object FfiConverterTypeBackupRecoveryKey: FfiConverter<BackupRecoveryKey, Pointer> {

    override fun lower(value: BackupRecoveryKey): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): BackupRecoveryKey {
        return BackupRecoveryKey(value)
    }

    override fun read(buf: ByteBuffer): BackupRecoveryKey {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BackupRecoveryKey) = 8UL

    override fun write(value: BackupRecoveryKey, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface DehydratedDeviceInterface {
    
    fun `keysForUpload`(`deviceDisplayName`: kotlin.String, `pickleKey`: kotlin.ByteArray): UploadDehydratedDeviceRequest
    
    companion object
}

open class DehydratedDevice: Disposable, AutoCloseable, DehydratedDeviceInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_dehydrateddevice(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_dehydrateddevice(pointer!!, status)
        }
    }

    
    @Throws(DehydrationException::class)override fun `keysForUpload`(`deviceDisplayName`: kotlin.String, `pickleKey`: kotlin.ByteArray): UploadDehydratedDeviceRequest {
            return FfiConverterTypeUploadDehydratedDeviceRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(DehydrationException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_dehydrateddevice_keys_for_upload(
        it, FfiConverterString.lower(`deviceDisplayName`),FfiConverterByteArray.lower(`pickleKey`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeDehydratedDevice: FfiConverter<DehydratedDevice, Pointer> {

    override fun lower(value: DehydratedDevice): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): DehydratedDevice {
        return DehydratedDevice(value)
    }

    override fun read(buf: ByteBuffer): DehydratedDevice {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: DehydratedDevice) = 8UL

    override fun write(value: DehydratedDevice, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface DehydratedDevicesInterface {
    
    fun `create`(): DehydratedDevice
    
    fun `rehydrate`(`pickleKey`: kotlin.ByteArray, `deviceId`: kotlin.String, `deviceData`: kotlin.String): RehydratedDevice
    
    companion object
}

open class DehydratedDevices: Disposable, AutoCloseable, DehydratedDevicesInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_dehydrateddevices(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_dehydrateddevices(pointer!!, status)
        }
    }

    
    @Throws(DehydrationException::class)override fun `create`(): DehydratedDevice {
            return FfiConverterTypeDehydratedDevice.lift(
    callWithPointer {
    uniffiRustCallWithError(DehydrationException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_dehydrateddevices_create(
        it, _status)
}
    }
    )
    }
    

    
    @Throws(DehydrationException::class)override fun `rehydrate`(`pickleKey`: kotlin.ByteArray, `deviceId`: kotlin.String, `deviceData`: kotlin.String): RehydratedDevice {
            return FfiConverterTypeRehydratedDevice.lift(
    callWithPointer {
    uniffiRustCallWithError(DehydrationException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_dehydrateddevices_rehydrate(
        it, FfiConverterByteArray.lower(`pickleKey`),FfiConverterString.lower(`deviceId`),FfiConverterString.lower(`deviceData`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeDehydratedDevices: FfiConverter<DehydratedDevices, Pointer> {

    override fun lower(value: DehydratedDevices): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): DehydratedDevices {
        return DehydratedDevices(value)
    }

    override fun read(buf: ByteBuffer): DehydratedDevices {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: DehydratedDevices) = 8UL

    override fun write(value: DehydratedDevices, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * A high level state machine that handles E2EE for Matrix.
 */
public interface OlmMachineInterface {
    
    /**
     * Are we able to encrypt room keys.
     *
     * This returns true if we have an active `BackupKey` and backup version
     * registered with the state machine.
     */
    fun `backupEnabled`(): kotlin.Boolean
    
    /**
     * Encrypt a batch of room keys and return a request that needs to be sent
     * out to backup the room keys.
     */
    fun `backupRoomKeys`(): Request?
    
    /**
     * Create a new private cross signing identity and create a request to
     * upload the public part of it to the server.
     */
    fun `bootstrapCrossSigning`(): BootstrapCrossSigningResult
    
    /**
     * Encrypt the given event with the given type and content for the given
     * device. This method is used to send an event to a specific device.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user who owns the target device.
     * * `device_id` - The ID of the device to which the message will be sent.
     * * `event_type` - The event type.
     * * `content` - The serialized content of the event.
     *
     * # Returns
     * A `Result` containing the request to be sent out if the encryption was
     * successful. If the device is not found, the result will be `Ok(None)`.
     *
     * The caller should ensure that there is an olm session (see
     * `get_missing_sessions`) with the target device before calling this
     * method.
     */
    fun `createEncryptedToDeviceRequest`(`userId`: kotlin.String, `deviceId`: kotlin.String, `eventType`: kotlin.String, `content`: kotlin.String): Request?
    
    /**
     * Get the status of the private cross signing keys.
     *
     * This can be used to check which private cross signing keys we have
     * stored locally.
     */
    fun `crossSigningStatus`(): CrossSigningStatus
    
    /**
     * Decrypt the given event that was sent in the given room.
     *
     * # Arguments
     *
     * * `event` - The serialized encrypted version of the event.
     *
     * * `room_id` - The unique id of the room where the event was sent to.
     *
     * * `strict_shields` - If `true`, messages will be decorated with strict
     * warnings (use `false` to match legacy behaviour where unsafe keys have
     * lower severity warnings and unverified identities are not decorated).
     */
    fun `decryptRoomEvent`(`event`: kotlin.String, `roomId`: kotlin.String, `handleVerificationEvents`: kotlin.Boolean, `strictShields`: kotlin.Boolean): DecryptedEvent
    
    /**
     * Manage dehydrated devices.
     */
    fun `dehydratedDevices`(): DehydratedDevices
    
    /**
     * Get the device ID of the device of this `OlmMachine`.
     */
    fun `deviceId`(): kotlin.String
    
    /**
     * Disable and reset our backup state.
     *
     * This will remove any pending backup request, remove the backup key and
     * reset the backup state of each room key we have.
     */
    fun `disableBackup`()
    
    /**
     * Discard the currently active room key for the given room if there is
     * one.
     */
    fun `discardRoomKey`(`roomId`: kotlin.String)
    
    /**
     * Activate the given backup key to be used with the given backup version.
     *
     * **Warning**: The caller needs to make sure that the given `BackupKey` is
     * trusted, otherwise we might be encrypting room keys that a malicious
     * party could decrypt.
     *
     * The [`OlmMachine::verify_backup`] method can be used to so.
     */
    fun `enableBackupV1`(`key`: MegolmV1BackupKey, `version`: kotlin.String)
    
    /**
     * Encrypt the given event with the given type and content for the given
     * room.
     *
     * **Note**: A room key needs to be shared with the group of users that are
     * members in the given room. If this is not done this method will panic.
     *
     * The usual flow to encrypt an event using this state machine is as
     * follows:
     *
     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for
     * the room members of the room we wish to participate in. This is done
     * using the [`get_missing_sessions()`](Self::get_missing_sessions)
     * method. This method call should be locked per call.
     *
     * 2. Share a room key with all the room members using the
     * [`share_room_key()`](Self::share_room_key). This method call should
     * be locked per room.
     *
     * 3. Encrypt the event using this method.
     *
     * 4. Send the encrypted event to the server.
     *
     * After the room key is shared steps 1 and 2 will become noops, unless
     * there's some changes in the room membership or in the list of devices a
     * member has.
     *
     * # Arguments
     *
     * * `room_id` - The unique id of the room where the event will be sent to.
     *
     * * `even_type` - The type of the event.
     *
     * * `content` - The serialized content of the event.
     */
    fun `encrypt`(`roomId`: kotlin.String, `eventType`: kotlin.String, `content`: kotlin.String): kotlin.String
    
    /**
     * Export all our private cross signing keys.
     *
     * The export will contain the seed for the ed25519 keys as a base64
     * encoded string.
     *
     * This method returns `None` if we don't have any private cross signing
     * keys.
     */
    fun `exportCrossSigningKeys`(): CrossSigningKeyExport?
    
    /**
     * Export all of our room keys.
     *
     * # Arguments
     *
     * * `passphrase` - The passphrase that should be used to encrypt the key
     * export.
     *
     * * `rounds` - The number of rounds that should be used when expanding the
     * passphrase into an key.
     */
    fun `exportRoomKeys`(`passphrase`: kotlin.String, `rounds`: kotlin.Int): kotlin.String
    
    /**
     * Get the backup keys we have saved in our crypto store.
     */
    fun `getBackupKeys`(): BackupKeys?
    
    /**
     * Get a `Device` from the store.
     *
     * # Arguments
     *
     * * `user_id` - The id of the device owner.
     *
     * * `device_id` - The id of the device itself.
     *
     * * `timeout` - The time in seconds we should wait before returning if the
     * user's device list has been marked as stale. Passing a 0 as the
     * timeout means that we won't wait at all. **Note**, this assumes that
     * the requests from [`OlmMachine::outgoing_requests`] are being
     * processed and sent out. Namely, this waits for a `/keys/query`
     * response to be received.
     */
    fun `getDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String, `timeout`: kotlin.UInt): Device?
    
    /**
     * Get a cross signing user identity for the given user ID.
     *
     * # Arguments
     *
     * * `user_id` - The unique id of the user that the identity belongs to
     *
     * * `timeout` - The time in seconds we should wait before returning if the
     * user's device list has been marked as stale. Passing a 0 as the
     * timeout means that we won't wait at all. **Note**, this assumes that
     * the requests from [`OlmMachine::outgoing_requests`] are being
     * processed and sent out. Namely, this waits for a `/keys/query`
     * response to be received.
     */
    fun `getIdentity`(`userId`: kotlin.String, `timeout`: kotlin.UInt): UserIdentity?
    
    /**
     * Generate one-time key claiming requests for all the users we are missing
     * sessions for.
     *
     * After the request was sent out and a successful response was received
     * the response body should be passed back to the state machine using the
     * [mark_request_as_sent()](Self::mark_request_as_sent) method.
     *
     * This method should be called every time before a call to
     * [`share_room_key()`](Self::share_room_key) is made.
     *
     * # Arguments
     *
     * * `users` - The list of users for which we would like to establish 1:1
     * Olm sessions for.
     */
    fun `getMissingSessions`(`users`: List<kotlin.String>): Request?
    
    /**
     * Check whether there is a global flag to only encrypt messages for
     * trusted devices or for everyone.
     *
     * Note that if the global flag is false, individual rooms may still be
     * encrypting only for trusted devices, depending on the per-room
     * `only_allow_trusted_devices` flag.
     */
    fun `getOnlyAllowTrustedDevices`(): kotlin.Boolean
    
    /**
     * Get the stored room settings, such as the encryption algorithm or
     * whether to encrypt only for trusted devices.
     *
     * These settings can be modified via
     * [set_room_algorithm()](Self::set_room_algorithm) and
     * [set_room_only_allow_trusted_devices()](Self::set_room_only_allow_trusted_devices)
     * methods.
     */
    fun `getRoomSettings`(`roomId`: kotlin.String): RoomSettings?
    
    /**
     * Get all devices of an user.
     *
     * # Arguments
     *
     * * `user_id` - The id of the device owner.
     *
     * * `timeout` - The time in seconds we should wait before returning if the
     * user's device list has been marked as stale. Passing a 0 as the
     * timeout means that we won't wait at all. **Note**, this assumes that
     * the requests from [`OlmMachine::outgoing_requests`] are being
     * processed and sent out. Namely, this waits for a `/keys/query`
     * response to be received.
     */
    fun `getUserDevices`(`userId`: kotlin.String, `timeout`: kotlin.UInt): List<Device>
    
    /**
     * Get a verification flow object for the given user with the given flow
     * id.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to fetch the
     * verification.
     *
     * * `flow_id` - The ID that uniquely identifies the verification flow.
     */
    fun `getVerification`(`userId`: kotlin.String, `flowId`: kotlin.String): Verification?
    
    /**
     * Get a verification requests that we share with the given user with the
     * given flow id.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to fetch the
     * verification requests.
     *
     * * `flow_id` - The ID that uniquely identifies the verification flow.
     */
    fun `getVerificationRequest`(`userId`: kotlin.String, `flowId`: kotlin.String): VerificationRequest?
    
    /**
     * Get all the verification requests that we share with the given user.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to fetch the
     * verification requests.
     */
    fun `getVerificationRequests`(`userId`: kotlin.String): List<VerificationRequest>
    
    /**
     * Get our own identity keys.
     */
    fun `identityKeys`(): Map<kotlin.String, kotlin.String>
    
    /**
     * Import our private cross signing keys.
     *
     * The export needs to contain the seed for the ed25519 keys as a base64
     * encoded string.
     */
    fun `importCrossSigningKeys`(`export`: CrossSigningKeyExport)
    
    /**
     * Import room keys from the given serialized unencrypted key export.
     *
     * This method is the same as [`OlmMachine::import_room_keys`] but the
     * decryption step is skipped and should be performed by the caller. This
     * should be used if the room keys are coming from the server-side backup,
     * the method will mark all imported room keys as backed up.
     *
     * **Note**: This has been deprecated. Use
     * [`OlmMachine::import_room_keys_from_backup`] instead.
     *
     * # Arguments
     *
     * * `keys` - The serialized version of the unencrypted key export.
     *
     * * `progress_listener` - A callback that can be used to introspect the
     * progress of the key import.
     */
    fun `importDecryptedRoomKeys`(`keys`: kotlin.String, `progressListener`: ProgressListener): KeysImportResult
    
    /**
     * Import room keys from the given serialized key export.
     *
     * # Arguments
     *
     * * `keys` - The serialized version of the key export.
     *
     * * `passphrase` - The passphrase that was used to encrypt the key export.
     *
     * * `progress_listener` - A callback that can be used to introspect the
     * progress of the key import.
     */
    fun `importRoomKeys`(`keys`: kotlin.String, `passphrase`: kotlin.String, `progressListener`: ProgressListener): KeysImportResult
    
    /**
     * Import room keys from the given serialized unencrypted key export.
     *
     * This method is the same as [`OlmMachine::import_room_keys`] but the
     * decryption step is skipped and should be performed by the caller. This
     * should be used if the room keys are coming from the server-side backup.
     * The method will mark all imported room keys as backed up.
     *
     * # Arguments
     *
     * * `keys` - The serialized version of the unencrypted key export.
     *
     * * `backup_version` - The version of the backup that these keys came
     * from.
     *
     * * `progress_listener` - A callback that can be used to introspect the
     * progress of the key import.
     */
    fun `importRoomKeysFromBackup`(`keys`: kotlin.String, `backupVersion`: kotlin.String, `progressListener`: ProgressListener): KeysImportResult
    
    /**
     * Check if a user identity is considered to be verified by us.
     */
    fun `isIdentityVerified`(`userId`: kotlin.String): kotlin.Boolean
    
    /**
     * Check if the given user is considered to be tracked.
     *
     * A user can be marked for tracking using the
     * [`OlmMachine::update_tracked_users()`] method.
     */
    fun `isUserTracked`(`userId`: kotlin.String): kotlin.Boolean
    
    /**
     * Mark a request that was sent to the server as sent.
     *
     * # Arguments
     *
     * * `request_id` - The unique ID of the request that was sent out. This
     * needs to be an UUID.
     *
     * * `request_type` - The type of the request that was sent out.
     *
     * * `response_body` - The body of the response that was received.
     */
    fun `markRequestAsSent`(`requestId`: kotlin.String, `requestType`: RequestType, `responseBody`: kotlin.String)
    
    /**
     * Get the list of outgoing requests that need to be sent to the
     * homeserver.
     *
     * After the request was sent out and a successful response was received
     * the response body should be passed back to the state machine using the
     * [mark_request_as_sent()](Self::mark_request_as_sent) method.
     *
     * **Note**: This method call should be locked per call.
     */
    fun `outgoingRequests`(): List<Request>
    
    /**
     * Request missing local secrets from our devices (cross signing private
     * keys, megolm backup). This will ask the sdk to create outgoing
     * request to get the missing secrets.
     *
     * The requests will be processed as soon as `outgoing_requests()` is
     * called to process them.
     */
    fun `queryMissingSecretsFromOtherSessions`(): kotlin.Boolean
    
    /**
     * Let the state machine know about E2EE related sync changes that we
     * received from the server.
     *
     * This needs to be called after every sync, ideally before processing
     * any other sync changes.
     *
     * # Arguments
     *
     * * `events` - A serialized array of to-device events we received in the
     * current sync response.
     *
     * * `device_changes` - The list of devices that have changed in some way
     * since the previous sync.
     *
     * * `key_counts` - The map of uploaded one-time key types and counts.
     */
    fun `receiveSyncChanges`(`events`: kotlin.String, `deviceChanges`: DeviceLists, `keyCounts`: Map<kotlin.String, kotlin.Int>, `unusedFallbackKeys`: List<kotlin.String>?, `nextBatchToken`: kotlin.String): SyncChangesResult
    
    /**
     * Receive an unencrypted verification event.
     *
     * This method can be used to pass verification events that are happening
     * in unencrypted rooms to the `OlmMachine`.
     *
     * **Note**: This has been deprecated.
     */
    fun `receiveUnencryptedVerificationEvent`(`event`: kotlin.String, `roomId`: kotlin.String)
    
    /**
     * Receive a verification event.
     *
     * This method can be used to pass verification events that are happening
     * in rooms to the `OlmMachine`. The event should be in the decrypted form.
     */
    fun `receiveVerificationEvent`(`event`: kotlin.String, `roomId`: kotlin.String)
    
    /**
     * Request or re-request a room key that was used to encrypt the given
     * event.
     *
     * # Arguments
     *
     * * `event` - The undecryptable event that we would wish to request a room
     * key for.
     *
     * * `room_id` - The id of the room the event was sent to.
     */
    fun `requestRoomKey`(`event`: kotlin.String, `roomId`: kotlin.String): KeyRequestPair
    
    /**
     * Request a verification flow to begin with our other devices.
     *
     * # Arguments
     *
     * `methods` - The list of verification methods we want to advertise to
     * support.
     */
    fun `requestSelfVerification`(`methods`: List<kotlin.String>): RequestVerificationResult?
    
    /**
     * Request a verification flow to begin with the given user in the given
     * room.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user which we would like to request to
     * verify.
     *
     * * `room_id` - The ID of the room that represents a DM with the given
     * user.
     *
     * * `event_id` - The event ID of the `m.key.verification.request` event
     * that we sent out to request the verification to begin. The content for
     * this request can be created using the [verification_request_content()]
     * method.
     *
     * * `methods` - The list of verification methods we advertised as
     * supported in the `m.key.verification.request` event.
     *
     * [verification_request_content()]: Self::verification_request_content
     */
    fun `requestVerification`(`userId`: kotlin.String, `roomId`: kotlin.String, `eventId`: kotlin.String, `methods`: List<kotlin.String>): VerificationRequest?
    
    /**
     * Request a verification flow to begin with the given user's device.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user which we would like to request to
     * verify.
     *
     * * `device_id` - The ID of the device that we wish to verify.
     *
     * * `methods` - The list of verification methods we advertised as
     * supported in the `m.key.verification.request` event.
     */
    fun `requestVerificationWithDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String, `methods`: List<kotlin.String>): RequestVerificationResult?
    
    /**
     * Get the number of backed up room keys and the total number of room keys.
     */
    fun `roomKeyCounts`(): RoomKeyCounts
    
    /**
     * Store the recovery key in the crypto store.
     *
     * This is useful if the client wants to support gossiping of the backup
     * key.
     */
    fun `saveRecoveryKey`(`key`: BackupRecoveryKey?, `version`: kotlin.String?)
    
    /**
     * Set local trust state for the device of the given user without creating
     * or uploading any signatures if verified
     */
    fun `setLocalTrust`(`userId`: kotlin.String, `deviceId`: kotlin.String, `trustState`: LocalTrust)
    
    /**
     * Set global flag whether to encrypt messages for untrusted devices, or
     * whether they should be excluded from the conversation.
     *
     * Note that if enabled, it will override any per-room settings.
     */
    fun `setOnlyAllowTrustedDevices`(`onlyAllowTrustedDevices`: kotlin.Boolean)
    
    /**
     * Set the room algorithm used for encrypting messages to one of the
     * available variants
     */
    fun `setRoomAlgorithm`(`roomId`: kotlin.String, `algorithm`: EventEncryptionAlgorithm)
    
    /**
     * Set flag whether this room should encrypt messages for untrusted
     * devices, or whether they should be excluded from the conversation.
     *
     * Note that per-room setting may be overridden by a global
     * [set_only_allow_trusted_devices()](Self::set_only_allow_trusted_devices)
     * method.
     */
    fun `setRoomOnlyAllowTrustedDevices`(`roomId`: kotlin.String, `onlyAllowTrustedDevices`: kotlin.Boolean)
    
    /**
     * Share a room key with the given list of users for the given room.
     *
     * After the request was sent out and a successful response was received
     * the response body should be passed back to the state machine using the
     * [mark_request_as_sent()](Self::mark_request_as_sent) method.
     *
     * This method should be called every time before a call to
     * [`encrypt()`](Self::encrypt) with the given `room_id` is made.
     *
     * # Arguments
     *
     * * `room_id` - The unique id of the room, note that this doesn't strictly
     * need to be a Matrix room, it just needs to be an unique identifier for
     * the group that will participate in the conversation.
     *
     * * `users` - The list of users which are considered to be members of the
     * room and should receive the room key.
     *
     * * `settings` - The settings that should be used for the room key.
     */
    fun `shareRoomKey`(`roomId`: kotlin.String, `users`: List<kotlin.String>, `settings`: EncryptionSettings): List<Request>
    
    /**
     * Sign the given message using our device key and if available cross
     * signing master key.
     */
    fun `sign`(`message`: kotlin.String): Map<kotlin.String, Map<kotlin.String, kotlin.String>>
    
    /**
     * Start short auth string verification with a device without going
     * through a verification request first.
     *
     * **Note**: This has been largely deprecated and the
     * [request_verification_with_device()] method should be used instead.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the
     * SAS verification.
     *
     * * `device_id` - The ID of device we would like to verify.
     *
     * [request_verification_with_device()]: Self::request_verification_with_device
     */
    fun `startSasWithDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String): StartSasResult?
    
    /**
     * Add the given list of users to be tracked, triggering a key query
     * request for them.
     *
     * The OlmMachine maintains a list of users whose devices we are keeping
     * track of: these are known as "tracked users". These must be users
     * that we share a room with, so that the server sends us updates for
     * their device lists.
     *
     * *Note*: Only users that aren't already tracked will be considered for an
     * update. It's safe to call this with already tracked users, it won't
     * result in excessive `/keys/query` requests.
     *
     * # Arguments
     *
     * `users` - The users that should be queued up for a key query.
     */
    fun `updateTrackedUsers`(`users`: List<kotlin.String>)
    
    /**
     * Get the user ID of the owner of this `OlmMachine`.
     */
    fun `userId`(): kotlin.String
    
    /**
     * Get an m.key.verification.request content for the given user.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user which we would like to request to
     * verify.
     *
     * * `methods` - The list of verification methods we want to advertise to
     * support.
     */
    fun `verificationRequestContent`(`userId`: kotlin.String, `methods`: List<kotlin.String>): kotlin.String?
    
    /**
     * Check if the given backup has been verified by us or by another of our
     * devices that we trust.
     *
     * The `backup_info` should be a JSON encoded object with the following
     * format:
     *
     * ```json
     * {
     * "algorithm": "m.megolm_backup.v1.curve25519-aes-sha2",
     * "auth_data": {
     * "public_key":"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM",
     * "signatures": {}
     * }
     * }
     * ```
     */
    fun `verifyBackup`(`backupInfo`: kotlin.String): SignatureVerification
    
    /**
     * Manually the device of the given user with the given device ID.
     *
     * This method will attempt to sign the device using our private cross
     * signing key.
     *
     * This method will always fail if the device belongs to someone else, we
     * can only sign our own devices.
     *
     * It can also fail if we don't have the private part of our self-signing
     * key.
     *
     * Returns a request that needs to be sent out for the device to be marked
     * as verified.
     */
    fun `verifyDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String): SignatureUploadRequest
    
    /**
     * Manually the user with the given user ID.
     *
     * This method will attempt to sign the user identity using either our
     * private cross signing key, for other user identities, or our device keys
     * for our own user identity.
     *
     * This method can fail if we don't have the private part of our
     * user-signing key.
     *
     * Returns a request that needs to be sent out for the user identity to be
     * marked as verified.
     */
    fun `verifyIdentity`(`userId`: kotlin.String): SignatureUploadRequest
    
    companion object
}

/**
 * A high level state machine that handles E2EE for Matrix.
 */
open class OlmMachine: Disposable, AutoCloseable, OlmMachineInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    /**
     * Create a new `OlmMachine`
     *
     * # Arguments
     *
     * * `user_id` - The unique ID of the user that owns this machine.
     *
     * * `device_id` - The unique ID of the device that owns this machine.
     *
     * * `path` - The path where the state of the machine should be persisted.
     *
     * * `passphrase` - The passphrase that should be used to encrypt the data
     * at rest in the crypto store. **Warning**, if no passphrase is given,
     * the store and all its data will remain unencrypted.
     */
    constructor(`userId`: kotlin.String, `deviceId`: kotlin.String, `path`: kotlin.String, `passphrase`: kotlin.String?) :
        this(
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_olmmachine_new(
        FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),FfiConverterString.lower(`path`),FfiConverterOptionalString.lower(`passphrase`),_status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_olmmachine(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_olmmachine(pointer!!, status)
        }
    }

    
    /**
     * Are we able to encrypt room keys.
     *
     * This returns true if we have an active `BackupKey` and backup version
     * registered with the state machine.
     */override fun `backupEnabled`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_backup_enabled(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Encrypt a batch of room keys and return a request that needs to be sent
     * out to backup the room keys.
     */
    @Throws(CryptoStoreException::class)override fun `backupRoomKeys`(): Request? {
            return FfiConverterOptionalTypeRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_backup_room_keys(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Create a new private cross signing identity and create a request to
     * upload the public part of it to the server.
     */
    @Throws(CryptoStoreException::class)override fun `bootstrapCrossSigning`(): BootstrapCrossSigningResult {
            return FfiConverterTypeBootstrapCrossSigningResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_bootstrap_cross_signing(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Encrypt the given event with the given type and content for the given
     * device. This method is used to send an event to a specific device.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user who owns the target device.
     * * `device_id` - The ID of the device to which the message will be sent.
     * * `event_type` - The event type.
     * * `content` - The serialized content of the event.
     *
     * # Returns
     * A `Result` containing the request to be sent out if the encryption was
     * successful. If the device is not found, the result will be `Ok(None)`.
     *
     * The caller should ensure that there is an olm session (see
     * `get_missing_sessions`) with the target device before calling this
     * method.
     */
    @Throws(CryptoStoreException::class)override fun `createEncryptedToDeviceRequest`(`userId`: kotlin.String, `deviceId`: kotlin.String, `eventType`: kotlin.String, `content`: kotlin.String): Request? {
            return FfiConverterOptionalTypeRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_create_encrypted_to_device_request(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),FfiConverterString.lower(`eventType`),FfiConverterString.lower(`content`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the status of the private cross signing keys.
     *
     * This can be used to check which private cross signing keys we have
     * stored locally.
     */override fun `crossSigningStatus`(): CrossSigningStatus {
            return FfiConverterTypeCrossSigningStatus.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_cross_signing_status(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Decrypt the given event that was sent in the given room.
     *
     * # Arguments
     *
     * * `event` - The serialized encrypted version of the event.
     *
     * * `room_id` - The unique id of the room where the event was sent to.
     *
     * * `strict_shields` - If `true`, messages will be decorated with strict
     * warnings (use `false` to match legacy behaviour where unsafe keys have
     * lower severity warnings and unverified identities are not decorated).
     */
    @Throws(DecryptionException::class)override fun `decryptRoomEvent`(`event`: kotlin.String, `roomId`: kotlin.String, `handleVerificationEvents`: kotlin.Boolean, `strictShields`: kotlin.Boolean): DecryptedEvent {
            return FfiConverterTypeDecryptedEvent.lift(
    callWithPointer {
    uniffiRustCallWithError(DecryptionException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_decrypt_room_event(
        it, FfiConverterString.lower(`event`),FfiConverterString.lower(`roomId`),FfiConverterBoolean.lower(`handleVerificationEvents`),FfiConverterBoolean.lower(`strictShields`),_status)
}
    }
    )
    }
    

    
    /**
     * Manage dehydrated devices.
     */override fun `dehydratedDevices`(): DehydratedDevices {
            return FfiConverterTypeDehydratedDevices.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_dehydrated_devices(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the device ID of the device of this `OlmMachine`.
     */override fun `deviceId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_device_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Disable and reset our backup state.
     *
     * This will remove any pending backup request, remove the backup key and
     * reset the backup state of each room key we have.
     */
    @Throws(CryptoStoreException::class)override fun `disableBackup`()
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_disable_backup(
        it, _status)
}
    }
    
    

    
    /**
     * Discard the currently active room key for the given room if there is
     * one.
     */
    @Throws(CryptoStoreException::class)override fun `discardRoomKey`(`roomId`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_discard_room_key(
        it, FfiConverterString.lower(`roomId`),_status)
}
    }
    
    

    
    /**
     * Activate the given backup key to be used with the given backup version.
     *
     * **Warning**: The caller needs to make sure that the given `BackupKey` is
     * trusted, otherwise we might be encrypting room keys that a malicious
     * party could decrypt.
     *
     * The [`OlmMachine::verify_backup`] method can be used to so.
     */
    @Throws(DecodeException::class)override fun `enableBackupV1`(`key`: MegolmV1BackupKey, `version`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(DecodeException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_enable_backup_v1(
        it, FfiConverterTypeMegolmV1BackupKey.lower(`key`),FfiConverterString.lower(`version`),_status)
}
    }
    
    

    
    /**
     * Encrypt the given event with the given type and content for the given
     * room.
     *
     * **Note**: A room key needs to be shared with the group of users that are
     * members in the given room. If this is not done this method will panic.
     *
     * The usual flow to encrypt an event using this state machine is as
     * follows:
     *
     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for
     * the room members of the room we wish to participate in. This is done
     * using the [`get_missing_sessions()`](Self::get_missing_sessions)
     * method. This method call should be locked per call.
     *
     * 2. Share a room key with all the room members using the
     * [`share_room_key()`](Self::share_room_key). This method call should
     * be locked per room.
     *
     * 3. Encrypt the event using this method.
     *
     * 4. Send the encrypted event to the server.
     *
     * After the room key is shared steps 1 and 2 will become noops, unless
     * there's some changes in the room membership or in the list of devices a
     * member has.
     *
     * # Arguments
     *
     * * `room_id` - The unique id of the room where the event will be sent to.
     *
     * * `even_type` - The type of the event.
     *
     * * `content` - The serialized content of the event.
     */
    @Throws(CryptoStoreException::class)override fun `encrypt`(`roomId`: kotlin.String, `eventType`: kotlin.String, `content`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_encrypt(
        it, FfiConverterString.lower(`roomId`),FfiConverterString.lower(`eventType`),FfiConverterString.lower(`content`),_status)
}
    }
    )
    }
    

    
    /**
     * Export all our private cross signing keys.
     *
     * The export will contain the seed for the ed25519 keys as a base64
     * encoded string.
     *
     * This method returns `None` if we don't have any private cross signing
     * keys.
     */
    @Throws(CryptoStoreException::class)override fun `exportCrossSigningKeys`(): CrossSigningKeyExport? {
            return FfiConverterOptionalTypeCrossSigningKeyExport.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_export_cross_signing_keys(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Export all of our room keys.
     *
     * # Arguments
     *
     * * `passphrase` - The passphrase that should be used to encrypt the key
     * export.
     *
     * * `rounds` - The number of rounds that should be used when expanding the
     * passphrase into an key.
     */
    @Throws(CryptoStoreException::class)override fun `exportRoomKeys`(`passphrase`: kotlin.String, `rounds`: kotlin.Int): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_export_room_keys(
        it, FfiConverterString.lower(`passphrase`),FfiConverterInt.lower(`rounds`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the backup keys we have saved in our crypto store.
     */
    @Throws(CryptoStoreException::class)override fun `getBackupKeys`(): BackupKeys? {
            return FfiConverterOptionalTypeBackupKeys.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_backup_keys(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get a `Device` from the store.
     *
     * # Arguments
     *
     * * `user_id` - The id of the device owner.
     *
     * * `device_id` - The id of the device itself.
     *
     * * `timeout` - The time in seconds we should wait before returning if the
     * user's device list has been marked as stale. Passing a 0 as the
     * timeout means that we won't wait at all. **Note**, this assumes that
     * the requests from [`OlmMachine::outgoing_requests`] are being
     * processed and sent out. Namely, this waits for a `/keys/query`
     * response to be received.
     */
    @Throws(CryptoStoreException::class)override fun `getDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String, `timeout`: kotlin.UInt): Device? {
            return FfiConverterOptionalTypeDevice.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_device(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),FfiConverterUInt.lower(`timeout`),_status)
}
    }
    )
    }
    

    
    /**
     * Get a cross signing user identity for the given user ID.
     *
     * # Arguments
     *
     * * `user_id` - The unique id of the user that the identity belongs to
     *
     * * `timeout` - The time in seconds we should wait before returning if the
     * user's device list has been marked as stale. Passing a 0 as the
     * timeout means that we won't wait at all. **Note**, this assumes that
     * the requests from [`OlmMachine::outgoing_requests`] are being
     * processed and sent out. Namely, this waits for a `/keys/query`
     * response to be received.
     */
    @Throws(CryptoStoreException::class)override fun `getIdentity`(`userId`: kotlin.String, `timeout`: kotlin.UInt): UserIdentity? {
            return FfiConverterOptionalTypeUserIdentity.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_identity(
        it, FfiConverterString.lower(`userId`),FfiConverterUInt.lower(`timeout`),_status)
}
    }
    )
    }
    

    
    /**
     * Generate one-time key claiming requests for all the users we are missing
     * sessions for.
     *
     * After the request was sent out and a successful response was received
     * the response body should be passed back to the state machine using the
     * [mark_request_as_sent()](Self::mark_request_as_sent) method.
     *
     * This method should be called every time before a call to
     * [`share_room_key()`](Self::share_room_key) is made.
     *
     * # Arguments
     *
     * * `users` - The list of users for which we would like to establish 1:1
     * Olm sessions for.
     */
    @Throws(CryptoStoreException::class)override fun `getMissingSessions`(`users`: List<kotlin.String>): Request? {
            return FfiConverterOptionalTypeRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_missing_sessions(
        it, FfiConverterSequenceString.lower(`users`),_status)
}
    }
    )
    }
    

    
    /**
     * Check whether there is a global flag to only encrypt messages for
     * trusted devices or for everyone.
     *
     * Note that if the global flag is false, individual rooms may still be
     * encrypting only for trusted devices, depending on the per-room
     * `only_allow_trusted_devices` flag.
     */
    @Throws(CryptoStoreException::class)override fun `getOnlyAllowTrustedDevices`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_only_allow_trusted_devices(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the stored room settings, such as the encryption algorithm or
     * whether to encrypt only for trusted devices.
     *
     * These settings can be modified via
     * [set_room_algorithm()](Self::set_room_algorithm) and
     * [set_room_only_allow_trusted_devices()](Self::set_room_only_allow_trusted_devices)
     * methods.
     */
    @Throws(CryptoStoreException::class)override fun `getRoomSettings`(`roomId`: kotlin.String): RoomSettings? {
            return FfiConverterOptionalTypeRoomSettings.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_room_settings(
        it, FfiConverterString.lower(`roomId`),_status)
}
    }
    )
    }
    

    
    /**
     * Get all devices of an user.
     *
     * # Arguments
     *
     * * `user_id` - The id of the device owner.
     *
     * * `timeout` - The time in seconds we should wait before returning if the
     * user's device list has been marked as stale. Passing a 0 as the
     * timeout means that we won't wait at all. **Note**, this assumes that
     * the requests from [`OlmMachine::outgoing_requests`] are being
     * processed and sent out. Namely, this waits for a `/keys/query`
     * response to be received.
     */
    @Throws(CryptoStoreException::class)override fun `getUserDevices`(`userId`: kotlin.String, `timeout`: kotlin.UInt): List<Device> {
            return FfiConverterSequenceTypeDevice.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_user_devices(
        it, FfiConverterString.lower(`userId`),FfiConverterUInt.lower(`timeout`),_status)
}
    }
    )
    }
    

    
    /**
     * Get a verification flow object for the given user with the given flow
     * id.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to fetch the
     * verification.
     *
     * * `flow_id` - The ID that uniquely identifies the verification flow.
     */override fun `getVerification`(`userId`: kotlin.String, `flowId`: kotlin.String): Verification? {
            return FfiConverterOptionalTypeVerification.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_verification(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`flowId`),_status)
}
    }
    )
    }
    

    
    /**
     * Get a verification requests that we share with the given user with the
     * given flow id.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to fetch the
     * verification requests.
     *
     * * `flow_id` - The ID that uniquely identifies the verification flow.
     */override fun `getVerificationRequest`(`userId`: kotlin.String, `flowId`: kotlin.String): VerificationRequest? {
            return FfiConverterOptionalTypeVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_verification_request(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`flowId`),_status)
}
    }
    )
    }
    

    
    /**
     * Get all the verification requests that we share with the given user.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to fetch the
     * verification requests.
     */override fun `getVerificationRequests`(`userId`: kotlin.String): List<VerificationRequest> {
            return FfiConverterSequenceTypeVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_get_verification_requests(
        it, FfiConverterString.lower(`userId`),_status)
}
    }
    )
    }
    

    
    /**
     * Get our own identity keys.
     */override fun `identityKeys`(): Map<kotlin.String, kotlin.String> {
            return FfiConverterMapStringString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_identity_keys(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Import our private cross signing keys.
     *
     * The export needs to contain the seed for the ed25519 keys as a base64
     * encoded string.
     */
    @Throws(SecretImportException::class)override fun `importCrossSigningKeys`(`export`: CrossSigningKeyExport)
        = 
    callWithPointer {
    uniffiRustCallWithError(SecretImportException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_cross_signing_keys(
        it, FfiConverterTypeCrossSigningKeyExport.lower(`export`),_status)
}
    }
    
    

    
    /**
     * Import room keys from the given serialized unencrypted key export.
     *
     * This method is the same as [`OlmMachine::import_room_keys`] but the
     * decryption step is skipped and should be performed by the caller. This
     * should be used if the room keys are coming from the server-side backup,
     * the method will mark all imported room keys as backed up.
     *
     * **Note**: This has been deprecated. Use
     * [`OlmMachine::import_room_keys_from_backup`] instead.
     *
     * # Arguments
     *
     * * `keys` - The serialized version of the unencrypted key export.
     *
     * * `progress_listener` - A callback that can be used to introspect the
     * progress of the key import.
     */
    @Throws(KeyImportException::class)override fun `importDecryptedRoomKeys`(`keys`: kotlin.String, `progressListener`: ProgressListener): KeysImportResult {
            return FfiConverterTypeKeysImportResult.lift(
    callWithPointer {
    uniffiRustCallWithError(KeyImportException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_decrypted_room_keys(
        it, FfiConverterString.lower(`keys`),FfiConverterTypeProgressListener.lower(`progressListener`),_status)
}
    }
    )
    }
    

    
    /**
     * Import room keys from the given serialized key export.
     *
     * # Arguments
     *
     * * `keys` - The serialized version of the key export.
     *
     * * `passphrase` - The passphrase that was used to encrypt the key export.
     *
     * * `progress_listener` - A callback that can be used to introspect the
     * progress of the key import.
     */
    @Throws(KeyImportException::class)override fun `importRoomKeys`(`keys`: kotlin.String, `passphrase`: kotlin.String, `progressListener`: ProgressListener): KeysImportResult {
            return FfiConverterTypeKeysImportResult.lift(
    callWithPointer {
    uniffiRustCallWithError(KeyImportException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_room_keys(
        it, FfiConverterString.lower(`keys`),FfiConverterString.lower(`passphrase`),FfiConverterTypeProgressListener.lower(`progressListener`),_status)
}
    }
    )
    }
    

    
    /**
     * Import room keys from the given serialized unencrypted key export.
     *
     * This method is the same as [`OlmMachine::import_room_keys`] but the
     * decryption step is skipped and should be performed by the caller. This
     * should be used if the room keys are coming from the server-side backup.
     * The method will mark all imported room keys as backed up.
     *
     * # Arguments
     *
     * * `keys` - The serialized version of the unencrypted key export.
     *
     * * `backup_version` - The version of the backup that these keys came
     * from.
     *
     * * `progress_listener` - A callback that can be used to introspect the
     * progress of the key import.
     */
    @Throws(KeyImportException::class)override fun `importRoomKeysFromBackup`(`keys`: kotlin.String, `backupVersion`: kotlin.String, `progressListener`: ProgressListener): KeysImportResult {
            return FfiConverterTypeKeysImportResult.lift(
    callWithPointer {
    uniffiRustCallWithError(KeyImportException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_import_room_keys_from_backup(
        it, FfiConverterString.lower(`keys`),FfiConverterString.lower(`backupVersion`),FfiConverterTypeProgressListener.lower(`progressListener`),_status)
}
    }
    )
    }
    

    
    /**
     * Check if a user identity is considered to be verified by us.
     */
    @Throws(CryptoStoreException::class)override fun `isIdentityVerified`(`userId`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_is_identity_verified(
        it, FfiConverterString.lower(`userId`),_status)
}
    }
    )
    }
    

    
    /**
     * Check if the given user is considered to be tracked.
     *
     * A user can be marked for tracking using the
     * [`OlmMachine::update_tracked_users()`] method.
     */
    @Throws(CryptoStoreException::class)override fun `isUserTracked`(`userId`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_is_user_tracked(
        it, FfiConverterString.lower(`userId`),_status)
}
    }
    )
    }
    

    
    /**
     * Mark a request that was sent to the server as sent.
     *
     * # Arguments
     *
     * * `request_id` - The unique ID of the request that was sent out. This
     * needs to be an UUID.
     *
     * * `request_type` - The type of the request that was sent out.
     *
     * * `response_body` - The body of the response that was received.
     */
    @Throws(CryptoStoreException::class)override fun `markRequestAsSent`(`requestId`: kotlin.String, `requestType`: RequestType, `responseBody`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_mark_request_as_sent(
        it, FfiConverterString.lower(`requestId`),FfiConverterTypeRequestType.lower(`requestType`),FfiConverterString.lower(`responseBody`),_status)
}
    }
    
    

    
    /**
     * Get the list of outgoing requests that need to be sent to the
     * homeserver.
     *
     * After the request was sent out and a successful response was received
     * the response body should be passed back to the state machine using the
     * [mark_request_as_sent()](Self::mark_request_as_sent) method.
     *
     * **Note**: This method call should be locked per call.
     */
    @Throws(CryptoStoreException::class)override fun `outgoingRequests`(): List<Request> {
            return FfiConverterSequenceTypeRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_outgoing_requests(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Request missing local secrets from our devices (cross signing private
     * keys, megolm backup). This will ask the sdk to create outgoing
     * request to get the missing secrets.
     *
     * The requests will be processed as soon as `outgoing_requests()` is
     * called to process them.
     */
    @Throws(CryptoStoreException::class)override fun `queryMissingSecretsFromOtherSessions`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_query_missing_secrets_from_other_sessions(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Let the state machine know about E2EE related sync changes that we
     * received from the server.
     *
     * This needs to be called after every sync, ideally before processing
     * any other sync changes.
     *
     * # Arguments
     *
     * * `events` - A serialized array of to-device events we received in the
     * current sync response.
     *
     * * `device_changes` - The list of devices that have changed in some way
     * since the previous sync.
     *
     * * `key_counts` - The map of uploaded one-time key types and counts.
     */
    @Throws(CryptoStoreException::class)override fun `receiveSyncChanges`(`events`: kotlin.String, `deviceChanges`: DeviceLists, `keyCounts`: Map<kotlin.String, kotlin.Int>, `unusedFallbackKeys`: List<kotlin.String>?, `nextBatchToken`: kotlin.String): SyncChangesResult {
            return FfiConverterTypeSyncChangesResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_receive_sync_changes(
        it, FfiConverterString.lower(`events`),FfiConverterTypeDeviceLists.lower(`deviceChanges`),FfiConverterMapStringInt.lower(`keyCounts`),FfiConverterOptionalSequenceString.lower(`unusedFallbackKeys`),FfiConverterString.lower(`nextBatchToken`),_status)
}
    }
    )
    }
    

    
    /**
     * Receive an unencrypted verification event.
     *
     * This method can be used to pass verification events that are happening
     * in unencrypted rooms to the `OlmMachine`.
     *
     * **Note**: This has been deprecated.
     */
    @Throws(CryptoStoreException::class)override fun `receiveUnencryptedVerificationEvent`(`event`: kotlin.String, `roomId`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_receive_unencrypted_verification_event(
        it, FfiConverterString.lower(`event`),FfiConverterString.lower(`roomId`),_status)
}
    }
    
    

    
    /**
     * Receive a verification event.
     *
     * This method can be used to pass verification events that are happening
     * in rooms to the `OlmMachine`. The event should be in the decrypted form.
     */
    @Throws(CryptoStoreException::class)override fun `receiveVerificationEvent`(`event`: kotlin.String, `roomId`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_receive_verification_event(
        it, FfiConverterString.lower(`event`),FfiConverterString.lower(`roomId`),_status)
}
    }
    
    

    
    /**
     * Request or re-request a room key that was used to encrypt the given
     * event.
     *
     * # Arguments
     *
     * * `event` - The undecryptable event that we would wish to request a room
     * key for.
     *
     * * `room_id` - The id of the room the event was sent to.
     */
    @Throws(DecryptionException::class)override fun `requestRoomKey`(`event`: kotlin.String, `roomId`: kotlin.String): KeyRequestPair {
            return FfiConverterTypeKeyRequestPair.lift(
    callWithPointer {
    uniffiRustCallWithError(DecryptionException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_room_key(
        it, FfiConverterString.lower(`event`),FfiConverterString.lower(`roomId`),_status)
}
    }
    )
    }
    

    
    /**
     * Request a verification flow to begin with our other devices.
     *
     * # Arguments
     *
     * `methods` - The list of verification methods we want to advertise to
     * support.
     */
    @Throws(CryptoStoreException::class)override fun `requestSelfVerification`(`methods`: List<kotlin.String>): RequestVerificationResult? {
            return FfiConverterOptionalTypeRequestVerificationResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_self_verification(
        it, FfiConverterSequenceString.lower(`methods`),_status)
}
    }
    )
    }
    

    
    /**
     * Request a verification flow to begin with the given user in the given
     * room.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user which we would like to request to
     * verify.
     *
     * * `room_id` - The ID of the room that represents a DM with the given
     * user.
     *
     * * `event_id` - The event ID of the `m.key.verification.request` event
     * that we sent out to request the verification to begin. The content for
     * this request can be created using the [verification_request_content()]
     * method.
     *
     * * `methods` - The list of verification methods we advertised as
     * supported in the `m.key.verification.request` event.
     *
     * [verification_request_content()]: Self::verification_request_content
     */
    @Throws(CryptoStoreException::class)override fun `requestVerification`(`userId`: kotlin.String, `roomId`: kotlin.String, `eventId`: kotlin.String, `methods`: List<kotlin.String>): VerificationRequest? {
            return FfiConverterOptionalTypeVerificationRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_verification(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`roomId`),FfiConverterString.lower(`eventId`),FfiConverterSequenceString.lower(`methods`),_status)
}
    }
    )
    }
    

    
    /**
     * Request a verification flow to begin with the given user's device.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user which we would like to request to
     * verify.
     *
     * * `device_id` - The ID of the device that we wish to verify.
     *
     * * `methods` - The list of verification methods we advertised as
     * supported in the `m.key.verification.request` event.
     */
    @Throws(CryptoStoreException::class)override fun `requestVerificationWithDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String, `methods`: List<kotlin.String>): RequestVerificationResult? {
            return FfiConverterOptionalTypeRequestVerificationResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_request_verification_with_device(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),FfiConverterSequenceString.lower(`methods`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the number of backed up room keys and the total number of room keys.
     */
    @Throws(CryptoStoreException::class)override fun `roomKeyCounts`(): RoomKeyCounts {
            return FfiConverterTypeRoomKeyCounts.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_room_key_counts(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Store the recovery key in the crypto store.
     *
     * This is useful if the client wants to support gossiping of the backup
     * key.
     */
    @Throws(CryptoStoreException::class)override fun `saveRecoveryKey`(`key`: BackupRecoveryKey?, `version`: kotlin.String?)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_save_recovery_key(
        it, FfiConverterOptionalTypeBackupRecoveryKey.lower(`key`),FfiConverterOptionalString.lower(`version`),_status)
}
    }
    
    

    
    /**
     * Set local trust state for the device of the given user without creating
     * or uploading any signatures if verified
     */
    @Throws(CryptoStoreException::class)override fun `setLocalTrust`(`userId`: kotlin.String, `deviceId`: kotlin.String, `trustState`: LocalTrust)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_local_trust(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),FfiConverterTypeLocalTrust.lower(`trustState`),_status)
}
    }
    
    

    
    /**
     * Set global flag whether to encrypt messages for untrusted devices, or
     * whether they should be excluded from the conversation.
     *
     * Note that if enabled, it will override any per-room settings.
     */
    @Throws(CryptoStoreException::class)override fun `setOnlyAllowTrustedDevices`(`onlyAllowTrustedDevices`: kotlin.Boolean)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_only_allow_trusted_devices(
        it, FfiConverterBoolean.lower(`onlyAllowTrustedDevices`),_status)
}
    }
    
    

    
    /**
     * Set the room algorithm used for encrypting messages to one of the
     * available variants
     */
    @Throws(CryptoStoreException::class)override fun `setRoomAlgorithm`(`roomId`: kotlin.String, `algorithm`: EventEncryptionAlgorithm)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_room_algorithm(
        it, FfiConverterString.lower(`roomId`),FfiConverterTypeEventEncryptionAlgorithm.lower(`algorithm`),_status)
}
    }
    
    

    
    /**
     * Set flag whether this room should encrypt messages for untrusted
     * devices, or whether they should be excluded from the conversation.
     *
     * Note that per-room setting may be overridden by a global
     * [set_only_allow_trusted_devices()](Self::set_only_allow_trusted_devices)
     * method.
     */
    @Throws(CryptoStoreException::class)override fun `setRoomOnlyAllowTrustedDevices`(`roomId`: kotlin.String, `onlyAllowTrustedDevices`: kotlin.Boolean)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_set_room_only_allow_trusted_devices(
        it, FfiConverterString.lower(`roomId`),FfiConverterBoolean.lower(`onlyAllowTrustedDevices`),_status)
}
    }
    
    

    
    /**
     * Share a room key with the given list of users for the given room.
     *
     * After the request was sent out and a successful response was received
     * the response body should be passed back to the state machine using the
     * [mark_request_as_sent()](Self::mark_request_as_sent) method.
     *
     * This method should be called every time before a call to
     * [`encrypt()`](Self::encrypt) with the given `room_id` is made.
     *
     * # Arguments
     *
     * * `room_id` - The unique id of the room, note that this doesn't strictly
     * need to be a Matrix room, it just needs to be an unique identifier for
     * the group that will participate in the conversation.
     *
     * * `users` - The list of users which are considered to be members of the
     * room and should receive the room key.
     *
     * * `settings` - The settings that should be used for the room key.
     */
    @Throws(CryptoStoreException::class)override fun `shareRoomKey`(`roomId`: kotlin.String, `users`: List<kotlin.String>, `settings`: EncryptionSettings): List<Request> {
            return FfiConverterSequenceTypeRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_share_room_key(
        it, FfiConverterString.lower(`roomId`),FfiConverterSequenceString.lower(`users`),FfiConverterTypeEncryptionSettings.lower(`settings`),_status)
}
    }
    )
    }
    

    
    /**
     * Sign the given message using our device key and if available cross
     * signing master key.
     */
    @Throws(CryptoStoreException::class)override fun `sign`(`message`: kotlin.String): Map<kotlin.String, Map<kotlin.String, kotlin.String>> {
            return FfiConverterMapStringMapStringString.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_sign(
        it, FfiConverterString.lower(`message`),_status)
}
    }
    )
    }
    

    
    /**
     * Start short auth string verification with a device without going
     * through a verification request first.
     *
     * **Note**: This has been largely deprecated and the
     * [request_verification_with_device()] method should be used instead.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the
     * SAS verification.
     *
     * * `device_id` - The ID of device we would like to verify.
     *
     * [request_verification_with_device()]: Self::request_verification_with_device
     */
    @Throws(CryptoStoreException::class)override fun `startSasWithDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String): StartSasResult? {
            return FfiConverterOptionalTypeStartSasResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_start_sas_with_device(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),_status)
}
    }
    )
    }
    

    
    /**
     * Add the given list of users to be tracked, triggering a key query
     * request for them.
     *
     * The OlmMachine maintains a list of users whose devices we are keeping
     * track of: these are known as "tracked users". These must be users
     * that we share a room with, so that the server sends us updates for
     * their device lists.
     *
     * *Note*: Only users that aren't already tracked will be considered for an
     * update. It's safe to call this with already tracked users, it won't
     * result in excessive `/keys/query` requests.
     *
     * # Arguments
     *
     * `users` - The users that should be queued up for a key query.
     */
    @Throws(CryptoStoreException::class)override fun `updateTrackedUsers`(`users`: List<kotlin.String>)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_update_tracked_users(
        it, FfiConverterSequenceString.lower(`users`),_status)
}
    }
    
    

    
    /**
     * Get the user ID of the owner of this `OlmMachine`.
     */override fun `userId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_user_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get an m.key.verification.request content for the given user.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user which we would like to request to
     * verify.
     *
     * * `methods` - The list of verification methods we want to advertise to
     * support.
     */
    @Throws(CryptoStoreException::class)override fun `verificationRequestContent`(`userId`: kotlin.String, `methods`: List<kotlin.String>): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verification_request_content(
        it, FfiConverterString.lower(`userId`),FfiConverterSequenceString.lower(`methods`),_status)
}
    }
    )
    }
    

    
    /**
     * Check if the given backup has been verified by us or by another of our
     * devices that we trust.
     *
     * The `backup_info` should be a JSON encoded object with the following
     * format:
     *
     * ```json
     * {
     * "algorithm": "m.megolm_backup.v1.curve25519-aes-sha2",
     * "auth_data": {
     * "public_key":"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM",
     * "signatures": {}
     * }
     * }
     * ```
     */
    @Throws(CryptoStoreException::class)override fun `verifyBackup`(`backupInfo`: kotlin.String): SignatureVerification {
            return FfiConverterTypeSignatureVerification.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verify_backup(
        it, FfiConverterString.lower(`backupInfo`),_status)
}
    }
    )
    }
    

    
    /**
     * Manually the device of the given user with the given device ID.
     *
     * This method will attempt to sign the device using our private cross
     * signing key.
     *
     * This method will always fail if the device belongs to someone else, we
     * can only sign our own devices.
     *
     * It can also fail if we don't have the private part of our self-signing
     * key.
     *
     * Returns a request that needs to be sent out for the device to be marked
     * as verified.
     */
    @Throws(SignatureException::class)override fun `verifyDevice`(`userId`: kotlin.String, `deviceId`: kotlin.String): SignatureUploadRequest {
            return FfiConverterTypeSignatureUploadRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(SignatureException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verify_device(
        it, FfiConverterString.lower(`userId`),FfiConverterString.lower(`deviceId`),_status)
}
    }
    )
    }
    

    
    /**
     * Manually the user with the given user ID.
     *
     * This method will attempt to sign the user identity using either our
     * private cross signing key, for other user identities, or our device keys
     * for our own user identity.
     *
     * This method can fail if we don't have the private part of our
     * user-signing key.
     *
     * Returns a request that needs to be sent out for the user identity to be
     * marked as verified.
     */
    @Throws(SignatureException::class)override fun `verifyIdentity`(`userId`: kotlin.String): SignatureUploadRequest {
            return FfiConverterTypeSignatureUploadRequest.lift(
    callWithPointer {
    uniffiRustCallWithError(SignatureException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_olmmachine_verify_identity(
        it, FfiConverterString.lower(`userId`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeOlmMachine: FfiConverter<OlmMachine, Pointer> {

    override fun lower(value: OlmMachine): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): OlmMachine {
        return OlmMachine(value)
    }

    override fun read(buf: ByteBuffer): OlmMachine {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: OlmMachine) = 8UL

    override fun write(value: OlmMachine, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The encryption component of PkEncryption support.
 *
 * This struct can be created using a [`Curve25519PublicKey`] corresponding to
 * a `PkDecryption` object, allowing messages to be encrypted for the
 * associated decryption object.
 */
public interface PkEncryptionInterface {
    
    /**
     * Encrypt a message using this [`PkEncryption`] object.
     */
    fun `encrypt`(`plaintext`: kotlin.String): PkMessage
    
    companion object
}

/**
 * The encryption component of PkEncryption support.
 *
 * This struct can be created using a [`Curve25519PublicKey`] corresponding to
 * a `PkDecryption` object, allowing messages to be encrypted for the
 * associated decryption object.
 */
open class PkEncryption: Disposable, AutoCloseable, PkEncryptionInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_pkencryption(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_pkencryption(pointer!!, status)
        }
    }

    
    /**
     * Encrypt a message using this [`PkEncryption`] object.
     */override fun `encrypt`(`plaintext`: kotlin.String): PkMessage {
            return FfiConverterTypePkMessage.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_pkencryption_encrypt(
        it, FfiConverterString.lower(`plaintext`),_status)
}
    }
    )
    }
    

    

    
    companion object {
        
    /**
     * Create a new [`PkEncryption`] object from a `Curve25519PublicKey`
     * encoded as Base64.
     *
     * The public key should come from an existing `PkDecryption` object.
     * Returns a `DecodeError` if the Curve25519 key could not be decoded
     * correctly.
     */
    @Throws(DecodeException::class) fun `fromBase64`(`key`: kotlin.String): PkEncryption {
            return FfiConverterTypePkEncryption.lift(
    uniffiRustCallWithError(DecodeException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_constructor_pkencryption_from_base64(
        FfiConverterString.lower(`key`),_status)
}
    )
    }
    

        
    }
    
}

public object FfiConverterTypePkEncryption: FfiConverter<PkEncryption, Pointer> {

    override fun lower(value: PkEncryption): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): PkEncryption {
        return PkEncryption(value)
    }

    override fun read(buf: ByteBuffer): PkEncryption {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: PkEncryption) = 8UL

    override fun write(value: PkEncryption, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The `m.qr_code.scan.v1`, `m.qr_code.show.v1`, and `m.reciprocate.v1`
 * verification flow.
 */
public interface QrCodeInterface {
    
    /**
     * Cancel the QR code verification using the given cancel code.
     *
     * # Arguments
     *
     * * `cancel_code` - The error code for why the verification was cancelled,
     * manual cancellatio usually happens with `m.user` cancel code. The full
     * list of cancel codes can be found in the [spec]
     *
     * [spec]: https://spec.matrix.org/unstable/client-server-api/#mkeyverificationcancel
     */
    fun `cancel`(`cancelCode`: kotlin.String): OutgoingVerificationRequest?
    
    /**
     * Get the CancelInfo of this QR code verification object.
     *
     * Will be `None` if the flow has not been cancelled.
     */
    fun `cancelInfo`(): CancelInfo?
    
    /**
     * Confirm a verification was successful.
     *
     * This method should be called if we want to confirm that the other side
     * has scanned our QR code.
     */
    fun `confirm`(): ConfirmVerificationResult?
    
    /**
     * Get the unique ID that identifies this QR code verification flow.
     */
    fun `flowId`(): kotlin.String
    
    /**
     * Generate data that should be encoded as a QR code.
     *
     * This method should be called right before a QR code should be displayed,
     * the returned data is base64 encoded (without padding) and needs to be
     * decoded on the other side before it can be put through a QR code
     * generator.
     */
    fun `generateQrCode`(): kotlin.String?
    
    /**
     * Has the QR verification been scanned by the other side.
     *
     * When the verification object is in this state it's required that the
     * user confirms that the other side has scanned the QR code.
     */
    fun `hasBeenScanned`(): kotlin.Boolean
    
    /**
     * Has the verification flow been cancelled.
     */
    fun `isCancelled`(): kotlin.Boolean
    
    /**
     * Is the QR code verification done.
     */
    fun `isDone`(): kotlin.Boolean
    
    /**
     * Get the device ID of the other side.
     */
    fun `otherDeviceId`(): kotlin.String
    
    /**
     * Get the user id of the other side.
     */
    fun `otherUserId`(): kotlin.String
    
    /**
     * Have we successfully scanned the QR code and are able to send a
     * reciprocation event.
     */
    fun `reciprocated`(): kotlin.Boolean
    
    /**
     * Get the room id if the verification is happening inside a room.
     */
    fun `roomId`(): kotlin.String?
    
    /**
     * Set a listener for changes in the QrCode verification process.
     *
     * The given callback will be called whenever the state changes.
     */
    fun `setChangesListener`(`listener`: QrCodeListener)
    
    /**
     * Get the current state of the QrCode verification process.
     */
    fun `state`(): QrCodeState
    
    /**
     * Did we initiate the verification flow.
     */
    fun `weStarted`(): kotlin.Boolean
    
    companion object
}

/**
 * The `m.qr_code.scan.v1`, `m.qr_code.show.v1`, and `m.reciprocate.v1`
 * verification flow.
 */
open class QrCode: Disposable, AutoCloseable, QrCodeInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_qrcode(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_qrcode(pointer!!, status)
        }
    }

    
    /**
     * Cancel the QR code verification using the given cancel code.
     *
     * # Arguments
     *
     * * `cancel_code` - The error code for why the verification was cancelled,
     * manual cancellatio usually happens with `m.user` cancel code. The full
     * list of cancel codes can be found in the [spec]
     *
     * [spec]: https://spec.matrix.org/unstable/client-server-api/#mkeyverificationcancel
     */override fun `cancel`(`cancelCode`: kotlin.String): OutgoingVerificationRequest? {
            return FfiConverterOptionalTypeOutgoingVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_cancel(
        it, FfiConverterString.lower(`cancelCode`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the CancelInfo of this QR code verification object.
     *
     * Will be `None` if the flow has not been cancelled.
     */override fun `cancelInfo`(): CancelInfo? {
            return FfiConverterOptionalTypeCancelInfo.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_cancel_info(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Confirm a verification was successful.
     *
     * This method should be called if we want to confirm that the other side
     * has scanned our QR code.
     */override fun `confirm`(): ConfirmVerificationResult? {
            return FfiConverterOptionalTypeConfirmVerificationResult.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_confirm(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the unique ID that identifies this QR code verification flow.
     */override fun `flowId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_flow_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Generate data that should be encoded as a QR code.
     *
     * This method should be called right before a QR code should be displayed,
     * the returned data is base64 encoded (without padding) and needs to be
     * decoded on the other side before it can be put through a QR code
     * generator.
     */override fun `generateQrCode`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_generate_qr_code(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Has the QR verification been scanned by the other side.
     *
     * When the verification object is in this state it's required that the
     * user confirms that the other side has scanned the QR code.
     */override fun `hasBeenScanned`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_has_been_scanned(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Has the verification flow been cancelled.
     */override fun `isCancelled`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_is_cancelled(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Is the QR code verification done.
     */override fun `isDone`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_is_done(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the device ID of the other side.
     */override fun `otherDeviceId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_other_device_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the user id of the other side.
     */override fun `otherUserId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_other_user_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Have we successfully scanned the QR code and are able to send a
     * reciprocation event.
     */override fun `reciprocated`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_reciprocated(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the room id if the verification is happening inside a room.
     */override fun `roomId`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_room_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Set a listener for changes in the QrCode verification process.
     *
     * The given callback will be called whenever the state changes.
     */override fun `setChangesListener`(`listener`: QrCodeListener)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_set_changes_listener(
        it, FfiConverterTypeQrCodeListener.lower(`listener`),_status)
}
    }
    
    

    
    /**
     * Get the current state of the QrCode verification process.
     */override fun `state`(): QrCodeState {
            return FfiConverterTypeQrCodeState.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_state(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Did we initiate the verification flow.
     */override fun `weStarted`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_qrcode_we_started(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeQrCode: FfiConverter<QrCode, Pointer> {

    override fun lower(value: QrCode): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): QrCode {
        return QrCode(value)
    }

    override fun read(buf: ByteBuffer): QrCode {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: QrCode) = 8UL

    override fun write(value: QrCode, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface RehydratedDeviceInterface {
    
    fun `receiveEvents`(`events`: kotlin.String)
    
    companion object
}

open class RehydratedDevice: Disposable, AutoCloseable, RehydratedDeviceInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_rehydrateddevice(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_rehydrateddevice(pointer!!, status)
        }
    }

    
    @Throws(CryptoStoreException::class)override fun `receiveEvents`(`events`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_rehydrateddevice_receive_events(
        it, FfiConverterString.lower(`events`),_status)
}
    }
    
    

    

    
    
    companion object
    
}

public object FfiConverterTypeRehydratedDevice: FfiConverter<RehydratedDevice, Pointer> {

    override fun lower(value: RehydratedDevice): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): RehydratedDevice {
        return RehydratedDevice(value)
    }

    override fun read(buf: ByteBuffer): RehydratedDevice {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RehydratedDevice) = 8UL

    override fun write(value: RehydratedDevice, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The `m.sas.v1` verification flow.
 */
public interface SasInterface {
    
    /**
     * Accept that we're going forward with the short auth string verification.
     */
    fun `accept`(): OutgoingVerificationRequest?
    
    /**
     * Cancel the SAS verification using the given cancel code.
     *
     * # Arguments
     *
     * * `cancel_code` - The error code for why the verification was cancelled,
     * manual cancellatio usually happens with `m.user` cancel code. The full
     * list of cancel codes can be found in the [spec]
     *
     * [spec]: https://spec.matrix.org/unstable/client-server-api/#mkeyverificationcancel
     */
    fun `cancel`(`cancelCode`: kotlin.String): OutgoingVerificationRequest?
    
    /**
     * Confirm a verification was successful.
     *
     * This method should be called if a short auth string should be confirmed
     * as matching.
     */
    fun `confirm`(): ConfirmVerificationResult?
    
    /**
     * Get the unique ID that identifies this SAS verification flow.
     */
    fun `flowId`(): kotlin.String
    
    /**
     * Get the decimal representation of the short auth string.
     *
     * *Note*: A SAS verification needs to be started and in the presentable
     * state for this to return the list of decimals, otherwise returns
     * `None`.
     */
    fun `getDecimals`(): List<kotlin.Int>?
    
    /**
     * Get a list of emoji indices of the emoji representation of the short
     * auth string.
     *
     * *Note*: A SAS verification needs to be started and in the presentable
     * state for this to return the list of emoji indices, otherwise returns
     * `None`.
     */
    fun `getEmojiIndices`(): List<kotlin.Int>?
    
    /**
     * Is the SAS flow done.
     */
    fun `isDone`(): kotlin.Boolean
    
    /**
     * Get the device ID of the other side.
     */
    fun `otherDeviceId`(): kotlin.String
    
    /**
     * Get the user id of the other side.
     */
    fun `otherUserId`(): kotlin.String
    
    /**
     * Get the room id if the verification is happening inside a room.
     */
    fun `roomId`(): kotlin.String?
    
    /**
     * Set a listener for changes in the SAS verification process.
     *
     * The given callback will be called whenever the state changes.
     *
     * This method can be used to react to changes in the state of the
     * verification process, or rather the method can be used to handle
     * each step of the verification process.
     *
     * This method will spawn a tokio task on the Rust side, once we reach the
     * Done or Cancelled state, the task will stop listening for changes.
     *
     * # Flowchart
     *
     * The flow of the verification process is pictured bellow. Please note
     * that the process can be cancelled at each step of the process.
     * Either side can cancel the process.
     *
     * ```text
     * ┌───────┐
     * │Started│
     * └───┬───┘
     * │
     * ┌────⌄───┐
     * │Accepted│
     * └────┬───┘
     * │
     * ┌───────⌄──────┐
     * │Keys Exchanged│
     * └───────┬──────┘
     * │
     * ________⌄________
     * ╱                 ╲       ┌─────────┐
     * ╱   Does the short  ╲______│Cancelled│
     * ╲ auth string match ╱ no   └─────────┘
     * ╲_________________╱
     * │yes
     * │
     * ┌────⌄────┐
     * │Confirmed│
     * └────┬────┘
     * │
     * ┌───⌄───┐
     * │  Done │
     * └───────┘
     * ```
     */
    fun `setChangesListener`(`listener`: SasListener)
    
    /**
     * Get the current state of the SAS verification process.
     */
    fun `state`(): SasState
    
    /**
     * Did we initiate the verification flow.
     */
    fun `weStarted`(): kotlin.Boolean
    
    companion object
}

/**
 * The `m.sas.v1` verification flow.
 */
open class Sas: Disposable, AutoCloseable, SasInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_sas(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_sas(pointer!!, status)
        }
    }

    
    /**
     * Accept that we're going forward with the short auth string verification.
     */override fun `accept`(): OutgoingVerificationRequest? {
            return FfiConverterOptionalTypeOutgoingVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_accept(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Cancel the SAS verification using the given cancel code.
     *
     * # Arguments
     *
     * * `cancel_code` - The error code for why the verification was cancelled,
     * manual cancellatio usually happens with `m.user` cancel code. The full
     * list of cancel codes can be found in the [spec]
     *
     * [spec]: https://spec.matrix.org/unstable/client-server-api/#mkeyverificationcancel
     */override fun `cancel`(`cancelCode`: kotlin.String): OutgoingVerificationRequest? {
            return FfiConverterOptionalTypeOutgoingVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_cancel(
        it, FfiConverterString.lower(`cancelCode`),_status)
}
    }
    )
    }
    

    
    /**
     * Confirm a verification was successful.
     *
     * This method should be called if a short auth string should be confirmed
     * as matching.
     */
    @Throws(CryptoStoreException::class)override fun `confirm`(): ConfirmVerificationResult? {
            return FfiConverterOptionalTypeConfirmVerificationResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_confirm(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the unique ID that identifies this SAS verification flow.
     */override fun `flowId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_flow_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the decimal representation of the short auth string.
     *
     * *Note*: A SAS verification needs to be started and in the presentable
     * state for this to return the list of decimals, otherwise returns
     * `None`.
     */override fun `getDecimals`(): List<kotlin.Int>? {
            return FfiConverterOptionalSequenceInt.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_get_decimals(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get a list of emoji indices of the emoji representation of the short
     * auth string.
     *
     * *Note*: A SAS verification needs to be started and in the presentable
     * state for this to return the list of emoji indices, otherwise returns
     * `None`.
     */override fun `getEmojiIndices`(): List<kotlin.Int>? {
            return FfiConverterOptionalSequenceInt.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_get_emoji_indices(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Is the SAS flow done.
     */override fun `isDone`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_is_done(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the device ID of the other side.
     */override fun `otherDeviceId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_other_device_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the user id of the other side.
     */override fun `otherUserId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_other_user_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the room id if the verification is happening inside a room.
     */override fun `roomId`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_room_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Set a listener for changes in the SAS verification process.
     *
     * The given callback will be called whenever the state changes.
     *
     * This method can be used to react to changes in the state of the
     * verification process, or rather the method can be used to handle
     * each step of the verification process.
     *
     * This method will spawn a tokio task on the Rust side, once we reach the
     * Done or Cancelled state, the task will stop listening for changes.
     *
     * # Flowchart
     *
     * The flow of the verification process is pictured bellow. Please note
     * that the process can be cancelled at each step of the process.
     * Either side can cancel the process.
     *
     * ```text
     * ┌───────┐
     * │Started│
     * └───┬───┘
     * │
     * ┌────⌄───┐
     * │Accepted│
     * └────┬───┘
     * │
     * ┌───────⌄──────┐
     * │Keys Exchanged│
     * └───────┬──────┘
     * │
     * ________⌄________
     * ╱                 ╲       ┌─────────┐
     * ╱   Does the short  ╲______│Cancelled│
     * ╲ auth string match ╱ no   └─────────┘
     * ╲_________________╱
     * │yes
     * │
     * ┌────⌄────┐
     * │Confirmed│
     * └────┬────┘
     * │
     * ┌───⌄───┐
     * │  Done │
     * └───────┘
     * ```
     */override fun `setChangesListener`(`listener`: SasListener)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_set_changes_listener(
        it, FfiConverterTypeSasListener.lower(`listener`),_status)
}
    }
    
    

    
    /**
     * Get the current state of the SAS verification process.
     */override fun `state`(): SasState {
            return FfiConverterTypeSasState.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_state(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Did we initiate the verification flow.
     */override fun `weStarted`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_sas_we_started(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeSas: FfiConverter<Sas, Pointer> {

    override fun lower(value: Sas): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Sas {
        return Sas(value)
    }

    override fun read(buf: ByteBuffer): Sas {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Sas) = 8UL

    override fun write(value: Sas, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * Enum representing the different verification flows we support.
 */
public interface VerificationInterface {
    
    /**
     * Try to represent the `Verification` as an `QrCode` verification object,
     * returns `None` if the verification is not a `QrCode` verification.
     */
    fun `asQr`(): QrCode?
    
    /**
     * Try to represent the `Verification` as an `Sas` verification object,
     * returns `None` if the verification is not a `Sas` verification.
     */
    fun `asSas`(): Sas?
    
    companion object
}

/**
 * Enum representing the different verification flows we support.
 */
open class Verification: Disposable, AutoCloseable, VerificationInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_verification(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_verification(pointer!!, status)
        }
    }

    
    /**
     * Try to represent the `Verification` as an `QrCode` verification object,
     * returns `None` if the verification is not a `QrCode` verification.
     */override fun `asQr`(): QrCode? {
            return FfiConverterOptionalTypeQrCode.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verification_as_qr(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Try to represent the `Verification` as an `Sas` verification object,
     * returns `None` if the verification is not a `Sas` verification.
     */override fun `asSas`(): Sas? {
            return FfiConverterOptionalTypeSas.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verification_as_sas(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeVerification: FfiConverter<Verification, Pointer> {

    override fun lower(value: Verification): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Verification {
        return Verification(value)
    }

    override fun read(buf: ByteBuffer): Verification {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Verification) = 8UL

    override fun write(value: Verification, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The verificatoin request object which then can transition into some concrete
 * verification method
 */
public interface VerificationRequestInterface {
    
    /**
     * Accept a verification requests that we share with the given user with
     * the given flow id.
     *
     * This will move the verification request into the ready state.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to accept the
     * verification requests.
     *
     * * `flow_id` - The ID that uniquely identifies the verification flow.
     *
     * * `methods` - A list of verification methods that we want to advertise
     * as supported.
     */
    fun `accept`(`methods`: List<kotlin.String>): OutgoingVerificationRequest?
    
    /**
     * Cancel a verification for the given user with the given flow id using
     * the given cancel code.
     */
    fun `cancel`(): OutgoingVerificationRequest?
    
    /**
     * Get info about the cancellation if the verification request has been
     * cancelled.
     */
    fun `cancelInfo`(): CancelInfo?
    
    /**
     * Get the unique ID of this verification request
     */
    fun `flowId`(): kotlin.String
    
    /**
     * Has the verification flow that been cancelled.
     */
    fun `isCancelled`(): kotlin.Boolean
    
    /**
     * Has the verification flow that was started with this request finished.
     */
    fun `isDone`(): kotlin.Boolean
    
    /**
     * Has the verification request been answered by another device.
     */
    fun `isPassive`(): kotlin.Boolean
    
    /**
     * Is the verification request ready to start a verification flow.
     */
    fun `isReady`(): kotlin.Boolean
    
    /**
     * The id of the other device that is participating in this verification.
     */
    fun `otherDeviceId`(): kotlin.String?
    
    /**
     * The id of the other user that is participating in this verification
     * request.
     */
    fun `otherUserId`(): kotlin.String
    
    /**
     * Get our own supported verification methods that we advertised.
     *
     * Will be present only we requested the verification or if we're in the
     * ready state.
     */
    fun `ourSupportedMethods`(): List<kotlin.String>?
    
    /**
     * Get the room id if the verification is happening inside a room.
     */
    fun `roomId`(): kotlin.String?
    
    /**
     * Pass data from a scanned QR code to an active verification request and
     * transition into QR code verification.
     *
     * This requires an active `VerificationRequest` to succeed, returns `None`
     * if no `VerificationRequest` is found or if the QR code data is invalid.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the QR
     * code verification.
     *
     * * `flow_id` - The ID of the verification request that initiated the
     * verification flow.
     *
     * * `data` - The data that was extracted from the scanned QR code as an
     * base64 encoded string, without padding.
     */
    fun `scanQrCode`(`data`: kotlin.String): ScanResult?
    
    /**
     * Set a listener for changes in the verification request
     *
     * The given callback will be called whenever the state changes.
     */
    fun `setChangesListener`(`listener`: VerificationRequestListener)
    
    /**
     * Transition from a verification request into QR code verification.
     *
     * This method should be called when one wants to display a QR code so the
     * other side can scan it and move the QR code verification forward.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the QR
     * code verification.
     *
     * * `flow_id` - The ID of the verification request that initiated the
     * verification flow.
     */
    fun `startQrVerification`(): QrCode?
    
    /**
     * Transition from a verification request into short auth string based
     * verification.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the
     * SAS verification.
     *
     * * `flow_id` - The ID of the verification request that initiated the
     * verification flow.
     */
    fun `startSasVerification`(): StartSasResult?
    
    /**
     * Get the current state of the verification request.
     */
    fun `state`(): VerificationRequestState
    
    /**
     * Get the supported verification methods of the other side.
     *
     * Will be present only if the other side requested the verification or if
     * we're in the ready state.
     */
    fun `theirSupportedMethods`(): List<kotlin.String>?
    
    /**
     * Did we initiate the verification request
     */
    fun `weStarted`(): kotlin.Boolean
    
    companion object
}

/**
 * The verificatoin request object which then can transition into some concrete
 * verification method
 */
open class VerificationRequest: Disposable, AutoCloseable, VerificationRequestInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_free_verificationrequest(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_clone_verificationrequest(pointer!!, status)
        }
    }

    
    /**
     * Accept a verification requests that we share with the given user with
     * the given flow id.
     *
     * This will move the verification request into the ready state.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to accept the
     * verification requests.
     *
     * * `flow_id` - The ID that uniquely identifies the verification flow.
     *
     * * `methods` - A list of verification methods that we want to advertise
     * as supported.
     */override fun `accept`(`methods`: List<kotlin.String>): OutgoingVerificationRequest? {
            return FfiConverterOptionalTypeOutgoingVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_accept(
        it, FfiConverterSequenceString.lower(`methods`),_status)
}
    }
    )
    }
    

    
    /**
     * Cancel a verification for the given user with the given flow id using
     * the given cancel code.
     */override fun `cancel`(): OutgoingVerificationRequest? {
            return FfiConverterOptionalTypeOutgoingVerificationRequest.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_cancel(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get info about the cancellation if the verification request has been
     * cancelled.
     */override fun `cancelInfo`(): CancelInfo? {
            return FfiConverterOptionalTypeCancelInfo.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_cancel_info(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the unique ID of this verification request
     */override fun `flowId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_flow_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Has the verification flow that been cancelled.
     */override fun `isCancelled`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_cancelled(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Has the verification flow that was started with this request finished.
     */override fun `isDone`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_done(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Has the verification request been answered by another device.
     */override fun `isPassive`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_passive(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Is the verification request ready to start a verification flow.
     */override fun `isReady`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_is_ready(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * The id of the other device that is participating in this verification.
     */override fun `otherDeviceId`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_other_device_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * The id of the other user that is participating in this verification
     * request.
     */override fun `otherUserId`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_other_user_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get our own supported verification methods that we advertised.
     *
     * Will be present only we requested the verification or if we're in the
     * ready state.
     */override fun `ourSupportedMethods`(): List<kotlin.String>? {
            return FfiConverterOptionalSequenceString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_our_supported_methods(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the room id if the verification is happening inside a room.
     */override fun `roomId`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_room_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Pass data from a scanned QR code to an active verification request and
     * transition into QR code verification.
     *
     * This requires an active `VerificationRequest` to succeed, returns `None`
     * if no `VerificationRequest` is found or if the QR code data is invalid.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the QR
     * code verification.
     *
     * * `flow_id` - The ID of the verification request that initiated the
     * verification flow.
     *
     * * `data` - The data that was extracted from the scanned QR code as an
     * base64 encoded string, without padding.
     */override fun `scanQrCode`(`data`: kotlin.String): ScanResult? {
            return FfiConverterOptionalTypeScanResult.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_scan_qr_code(
        it, FfiConverterString.lower(`data`),_status)
}
    }
    )
    }
    

    
    /**
     * Set a listener for changes in the verification request
     *
     * The given callback will be called whenever the state changes.
     */override fun `setChangesListener`(`listener`: VerificationRequestListener)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_set_changes_listener(
        it, FfiConverterTypeVerificationRequestListener.lower(`listener`),_status)
}
    }
    
    

    
    /**
     * Transition from a verification request into QR code verification.
     *
     * This method should be called when one wants to display a QR code so the
     * other side can scan it and move the QR code verification forward.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the QR
     * code verification.
     *
     * * `flow_id` - The ID of the verification request that initiated the
     * verification flow.
     */
    @Throws(CryptoStoreException::class)override fun `startQrVerification`(): QrCode? {
            return FfiConverterOptionalTypeQrCode.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_start_qr_verification(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Transition from a verification request into short auth string based
     * verification.
     *
     * # Arguments
     *
     * * `user_id` - The ID of the user for which we would like to start the
     * SAS verification.
     *
     * * `flow_id` - The ID of the verification request that initiated the
     * verification flow.
     */
    @Throws(CryptoStoreException::class)override fun `startSasVerification`(): StartSasResult? {
            return FfiConverterOptionalTypeStartSasResult.lift(
    callWithPointer {
    uniffiRustCallWithError(CryptoStoreException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_start_sas_verification(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the current state of the verification request.
     */override fun `state`(): VerificationRequestState {
            return FfiConverterTypeVerificationRequestState.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_state(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Get the supported verification methods of the other side.
     *
     * Will be present only if the other side requested the verification or if
     * we're in the ready state.
     */override fun `theirSupportedMethods`(): List<kotlin.String>? {
            return FfiConverterOptionalSequenceString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_their_supported_methods(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Did we initiate the verification request
     */override fun `weStarted`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_method_verificationrequest_we_started(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

public object FfiConverterTypeVerificationRequest: FfiConverter<VerificationRequest, Pointer> {

    override fun lower(value: VerificationRequest): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): VerificationRequest {
        return VerificationRequest(value)
    }

    override fun read(buf: ByteBuffer): VerificationRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: VerificationRequest) = 8UL

    override fun write(value: VerificationRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class BootstrapCrossSigningResult (
    /**
     * Optional request to upload some device keys alongside.
     *
     * Must be sent first if present, and marked with `mark_request_as_sent`.
     */
    var `uploadKeysRequest`: Request?, 
    /**
     * Request to upload the signing keys. Must be sent second.
     */
    var `uploadSigningKeysRequest`: UploadSigningKeysRequest, 
    /**
     * Request to upload the keys signatures, including for the signing keys
     * and optionally for the device keys. Must be sent last.
     */
    var `uploadSignatureRequest`: SignatureUploadRequest
) {
    
    companion object
}

public object FfiConverterTypeBootstrapCrossSigningResult: FfiConverterRustBuffer<BootstrapCrossSigningResult> {
    override fun read(buf: ByteBuffer): BootstrapCrossSigningResult {
        return BootstrapCrossSigningResult(
            FfiConverterOptionalTypeRequest.read(buf),
            FfiConverterTypeUploadSigningKeysRequest.read(buf),
            FfiConverterTypeSignatureUploadRequest.read(buf),
        )
    }

    override fun allocationSize(value: BootstrapCrossSigningResult) = (
            FfiConverterOptionalTypeRequest.allocationSize(value.`uploadKeysRequest`) +
            FfiConverterTypeUploadSigningKeysRequest.allocationSize(value.`uploadSigningKeysRequest`) +
            FfiConverterTypeSignatureUploadRequest.allocationSize(value.`uploadSignatureRequest`)
    )

    override fun write(value: BootstrapCrossSigningResult, buf: ByteBuffer) {
            FfiConverterOptionalTypeRequest.write(value.`uploadKeysRequest`, buf)
            FfiConverterTypeUploadSigningKeysRequest.write(value.`uploadSigningKeysRequest`, buf)
            FfiConverterTypeSignatureUploadRequest.write(value.`uploadSignatureRequest`, buf)
    }
}



/**
 * Information on why a verification flow has been cancelled and by whom.
 */
data class CancelInfo (
    /**
     * The textual representation of the cancel reason
     */
    var `reason`: kotlin.String, 
    /**
     * The code describing the cancel reason
     */
    var `cancelCode`: kotlin.String, 
    /**
     * Was the verification flow cancelled by us
     */
    var `cancelledByUs`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeCancelInfo: FfiConverterRustBuffer<CancelInfo> {
    override fun read(buf: ByteBuffer): CancelInfo {
        return CancelInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CancelInfo) = (
            FfiConverterString.allocationSize(value.`reason`) +
            FfiConverterString.allocationSize(value.`cancelCode`) +
            FfiConverterBoolean.allocationSize(value.`cancelledByUs`)
    )

    override fun write(value: CancelInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`reason`, buf)
            FfiConverterString.write(value.`cancelCode`, buf)
            FfiConverterBoolean.write(value.`cancelledByUs`, buf)
    }
}



/**
 * A result type for confirming verifications.
 */
data class ConfirmVerificationResult (
    /**
     * The requests that needs to be sent out to notify the other side that we
     * confirmed the verification.
     */
    var `requests`: List<OutgoingVerificationRequest>, 
    /**
     * A request that will upload signatures of the verified device or user, if
     * the verification is completed and we're able to sign devices or users
     */
    var `signatureRequest`: SignatureUploadRequest?
) {
    
    companion object
}

public object FfiConverterTypeConfirmVerificationResult: FfiConverterRustBuffer<ConfirmVerificationResult> {
    override fun read(buf: ByteBuffer): ConfirmVerificationResult {
        return ConfirmVerificationResult(
            FfiConverterSequenceTypeOutgoingVerificationRequest.read(buf),
            FfiConverterOptionalTypeSignatureUploadRequest.read(buf),
        )
    }

    override fun allocationSize(value: ConfirmVerificationResult) = (
            FfiConverterSequenceTypeOutgoingVerificationRequest.allocationSize(value.`requests`) +
            FfiConverterOptionalTypeSignatureUploadRequest.allocationSize(value.`signatureRequest`)
    )

    override fun write(value: ConfirmVerificationResult, buf: ByteBuffer) {
            FfiConverterSequenceTypeOutgoingVerificationRequest.write(value.`requests`, buf)
            FfiConverterOptionalTypeSignatureUploadRequest.write(value.`signatureRequest`, buf)
    }
}



/**
 * A struct containing private cross signing keys that can be backed up or
 * uploaded to the secret store.
 */
data class CrossSigningKeyExport (
    /**
     * The seed of the master key encoded as unpadded base64.
     */
    var `masterKey`: kotlin.String?, 
    /**
     * The seed of the self signing key encoded as unpadded base64.
     */
    var `selfSigningKey`: kotlin.String?, 
    /**
     * The seed of the user signing key encoded as unpadded base64.
     */
    var `userSigningKey`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeCrossSigningKeyExport: FfiConverterRustBuffer<CrossSigningKeyExport> {
    override fun read(buf: ByteBuffer): CrossSigningKeyExport {
        return CrossSigningKeyExport(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: CrossSigningKeyExport) = (
            FfiConverterOptionalString.allocationSize(value.`masterKey`) +
            FfiConverterOptionalString.allocationSize(value.`selfSigningKey`) +
            FfiConverterOptionalString.allocationSize(value.`userSigningKey`)
    )

    override fun write(value: CrossSigningKeyExport, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`masterKey`, buf)
            FfiConverterOptionalString.write(value.`selfSigningKey`, buf)
            FfiConverterOptionalString.write(value.`userSigningKey`, buf)
    }
}



/**
 * Struct representing the state of our private cross signing keys, it shows
 * which private cross signing keys we have locally stored.
 */
data class CrossSigningStatus (
    /**
     * Do we have the master key.
     */
    var `hasMaster`: kotlin.Boolean, 
    /**
     * Do we have the self signing key, this one is necessary to sign our own
     * devices.
     */
    var `hasSelfSigning`: kotlin.Boolean, 
    /**
     * Do we have the user signing key, this one is necessary to sign other
     * users.
     */
    var `hasUserSigning`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeCrossSigningStatus: FfiConverterRustBuffer<CrossSigningStatus> {
    override fun read(buf: ByteBuffer): CrossSigningStatus {
        return CrossSigningStatus(
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CrossSigningStatus) = (
            FfiConverterBoolean.allocationSize(value.`hasMaster`) +
            FfiConverterBoolean.allocationSize(value.`hasSelfSigning`) +
            FfiConverterBoolean.allocationSize(value.`hasUserSigning`)
    )

    override fun write(value: CrossSigningStatus, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMaster`, buf)
            FfiConverterBoolean.write(value.`hasSelfSigning`, buf)
            FfiConverterBoolean.write(value.`hasUserSigning`, buf)
    }
}



/**
 * An event that was successfully decrypted.
 */
data class DecryptedEvent (
    /**
     * The decrypted version of the event.
     */
    var `clearEvent`: kotlin.String, 
    /**
     * The claimed curve25519 key of the sender.
     */
    var `senderCurve25519Key`: kotlin.String, 
    /**
     * The claimed ed25519 key of the sender.
     */
    var `claimedEd25519Key`: kotlin.String?, 
    /**
     * The curve25519 chain of the senders that forwarded the Megolm decryption
     * key to us. Is empty if the key came directly from the sender of the
     * event.
     */
    var `forwardingCurve25519Chain`: List<kotlin.String>, 
    /**
     * The shield state (color and message to display to user) for the event,
     * representing the event's authenticity. Computed from the properties of
     * the sender user identity and their Olm device.
     *
     * Note that this is computed at time of decryption, so the value reflects
     * the computed event authenticity at that time. Authenticity-related
     * properties can change later on, such as when a user identity is
     * subsequently verified or a device is deleted.
     */
    var `shieldState`: ShieldState
) {
    
    companion object
}

public object FfiConverterTypeDecryptedEvent: FfiConverterRustBuffer<DecryptedEvent> {
    override fun read(buf: ByteBuffer): DecryptedEvent {
        return DecryptedEvent(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterTypeShieldState.read(buf),
        )
    }

    override fun allocationSize(value: DecryptedEvent) = (
            FfiConverterString.allocationSize(value.`clearEvent`) +
            FfiConverterString.allocationSize(value.`senderCurve25519Key`) +
            FfiConverterOptionalString.allocationSize(value.`claimedEd25519Key`) +
            FfiConverterSequenceString.allocationSize(value.`forwardingCurve25519Chain`) +
            FfiConverterTypeShieldState.allocationSize(value.`shieldState`)
    )

    override fun write(value: DecryptedEvent, buf: ByteBuffer) {
            FfiConverterString.write(value.`clearEvent`, buf)
            FfiConverterString.write(value.`senderCurve25519Key`, buf)
            FfiConverterOptionalString.write(value.`claimedEd25519Key`, buf)
            FfiConverterSequenceString.write(value.`forwardingCurve25519Chain`, buf)
            FfiConverterTypeShieldState.write(value.`shieldState`, buf)
    }
}



/**
 * An E2EE capable Matrix device.
 */
data class Device (
    /**
     * The device owner.
     */
    var `userId`: kotlin.String, 
    /**
     * The unique ID of the device.
     */
    var `deviceId`: kotlin.String, 
    /**
     * The published public identity keys of the devices
     *
     * A map from the key type (e.g. curve25519) to the base64 encoded key.
     */
    var `keys`: Map<kotlin.String, kotlin.String>, 
    /**
     * The supported algorithms of the device.
     */
    var `algorithms`: List<kotlin.String>, 
    /**
     * The human readable name of the device.
     */
    var `displayName`: kotlin.String?, 
    /**
     * A flag indicating if the device has been blocked, blocked devices don't
     * receive any room keys from us.
     */
    var `isBlocked`: kotlin.Boolean, 
    /**
     * Is the device locally trusted
     */
    var `locallyTrusted`: kotlin.Boolean, 
    /**
     * Is our cross signing identity trusted and does the identity trust the
     * device.
     */
    var `crossSigningTrusted`: kotlin.Boolean, 
    /**
     * The first time this device was seen in local timestamp, milliseconds
     * since epoch.
     */
    var `firstTimeSeenTs`: kotlin.ULong, 
    /**
     * Whether or not the device is a dehydrated device.
     */
    var `dehydrated`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeDevice: FfiConverterRustBuffer<Device> {
    override fun read(buf: ByteBuffer): Device {
        return Device(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Device) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterMapStringString.allocationSize(value.`keys`) +
            FfiConverterSequenceString.allocationSize(value.`algorithms`) +
            FfiConverterOptionalString.allocationSize(value.`displayName`) +
            FfiConverterBoolean.allocationSize(value.`isBlocked`) +
            FfiConverterBoolean.allocationSize(value.`locallyTrusted`) +
            FfiConverterBoolean.allocationSize(value.`crossSigningTrusted`) +
            FfiConverterULong.allocationSize(value.`firstTimeSeenTs`) +
            FfiConverterBoolean.allocationSize(value.`dehydrated`)
    )

    override fun write(value: Device, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterMapStringString.write(value.`keys`, buf)
            FfiConverterSequenceString.write(value.`algorithms`, buf)
            FfiConverterOptionalString.write(value.`displayName`, buf)
            FfiConverterBoolean.write(value.`isBlocked`, buf)
            FfiConverterBoolean.write(value.`locallyTrusted`, buf)
            FfiConverterBoolean.write(value.`crossSigningTrusted`, buf)
            FfiConverterULong.write(value.`firstTimeSeenTs`, buf)
            FfiConverterBoolean.write(value.`dehydrated`, buf)
    }
}



data class DeviceLists (
    var `changed`: List<kotlin.String>, 
    var `left`: List<kotlin.String>
) {
    
    companion object
}

public object FfiConverterTypeDeviceLists: FfiConverterRustBuffer<DeviceLists> {
    override fun read(buf: ByteBuffer): DeviceLists {
        return DeviceLists(
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: DeviceLists) = (
            FfiConverterSequenceString.allocationSize(value.`changed`) +
            FfiConverterSequenceString.allocationSize(value.`left`)
    )

    override fun write(value: DeviceLists, buf: ByteBuffer) {
            FfiConverterSequenceString.write(value.`changed`, buf)
            FfiConverterSequenceString.write(value.`left`, buf)
    }
}



/**
 * Settings that should be used when a room key is shared.
 *
 * These settings control which algorithm the room key should use, how long a
 * room key should be used and some other important information that determines
 * the lifetime of a room key.
 */
data class EncryptionSettings (
    /**
     * The encryption algorithm that should be used in the room.
     */
    var `algorithm`: EventEncryptionAlgorithm, 
    /**
     * How long can the room key be used before it should be rotated. Time in
     * seconds.
     */
    var `rotationPeriod`: kotlin.ULong, 
    /**
     * How many messages should be sent before the room key should be rotated.
     */
    var `rotationPeriodMsgs`: kotlin.ULong, 
    /**
     * The current history visibility of the room. The visibility will be
     * tracked by the room key and the key will be rotated if the visibility
     * changes.
     */
    var `historyVisibility`: HistoryVisibility, 
    /**
     * Should untrusted devices receive the room key, or should they be
     * excluded from the conversation.
     */
    var `onlyAllowTrustedDevices`: kotlin.Boolean, 
    /**
     * Should fail to send when a verified user has unverified devices, or when
     * a previously verified user replaces their identity.
     */
    var `errorOnVerifiedUserProblem`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeEncryptionSettings: FfiConverterRustBuffer<EncryptionSettings> {
    override fun read(buf: ByteBuffer): EncryptionSettings {
        return EncryptionSettings(
            FfiConverterTypeEventEncryptionAlgorithm.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeHistoryVisibility.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: EncryptionSettings) = (
            FfiConverterTypeEventEncryptionAlgorithm.allocationSize(value.`algorithm`) +
            FfiConverterULong.allocationSize(value.`rotationPeriod`) +
            FfiConverterULong.allocationSize(value.`rotationPeriodMsgs`) +
            FfiConverterTypeHistoryVisibility.allocationSize(value.`historyVisibility`) +
            FfiConverterBoolean.allocationSize(value.`onlyAllowTrustedDevices`) +
            FfiConverterBoolean.allocationSize(value.`errorOnVerifiedUserProblem`)
    )

    override fun write(value: EncryptionSettings, buf: ByteBuffer) {
            FfiConverterTypeEventEncryptionAlgorithm.write(value.`algorithm`, buf)
            FfiConverterULong.write(value.`rotationPeriod`, buf)
            FfiConverterULong.write(value.`rotationPeriodMsgs`, buf)
            FfiConverterTypeHistoryVisibility.write(value.`historyVisibility`, buf)
            FfiConverterBoolean.write(value.`onlyAllowTrustedDevices`, buf)
            FfiConverterBoolean.write(value.`errorOnVerifiedUserProblem`, buf)
    }
}



/**
 * A pair of outgoing room key requests, both of those are sendToDevice
 * requests.
 */
data class KeyRequestPair (
    /**
     * The optional cancellation, this is None if no previous key request was
     * sent out for this key, thus it doesn't need to be cancelled.
     */
    var `cancellation`: Request?, 
    /**
     * The actual key request.
     */
    var `keyRequest`: Request
) {
    
    companion object
}

public object FfiConverterTypeKeyRequestPair: FfiConverterRustBuffer<KeyRequestPair> {
    override fun read(buf: ByteBuffer): KeyRequestPair {
        return KeyRequestPair(
            FfiConverterOptionalTypeRequest.read(buf),
            FfiConverterTypeRequest.read(buf),
        )
    }

    override fun allocationSize(value: KeyRequestPair) = (
            FfiConverterOptionalTypeRequest.allocationSize(value.`cancellation`) +
            FfiConverterTypeRequest.allocationSize(value.`keyRequest`)
    )

    override fun write(value: KeyRequestPair, buf: ByteBuffer) {
            FfiConverterOptionalTypeRequest.write(value.`cancellation`, buf)
            FfiConverterTypeRequest.write(value.`keyRequest`, buf)
    }
}



data class KeysImportResult (
    /**
     * The number of room keys that were imported.
     */
    var `imported`: kotlin.Long, 
    /**
     * The total number of room keys that were found in the export.
     */
    var `total`: kotlin.Long, 
    /**
     * The map of keys that were imported.
     *
     * It's a map from room id to a map of the sender key to a list of session
     * ids.
     */
    var `keys`: Map<kotlin.String, Map<kotlin.String, List<kotlin.String>>>
) {
    
    companion object
}

public object FfiConverterTypeKeysImportResult: FfiConverterRustBuffer<KeysImportResult> {
    override fun read(buf: ByteBuffer): KeysImportResult {
        return KeysImportResult(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterMapStringMapStringSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: KeysImportResult) = (
            FfiConverterLong.allocationSize(value.`imported`) +
            FfiConverterLong.allocationSize(value.`total`) +
            FfiConverterMapStringMapStringSequenceString.allocationSize(value.`keys`)
    )

    override fun write(value: KeysImportResult, buf: ByteBuffer) {
            FfiConverterLong.write(value.`imported`, buf)
            FfiConverterLong.write(value.`total`, buf)
            FfiConverterMapStringMapStringSequenceString.write(value.`keys`, buf)
    }
}



/**
 * The public part of the backup key.
 */
data class MegolmV1BackupKey (
    /**
     * The actual base64 encoded public key.
     */
    var `publicKey`: kotlin.String, 
    /**
     * Signatures that have signed our backup key.
     */
    var `signatures`: Map<kotlin.String, Map<kotlin.String, kotlin.String>>, 
    /**
     * The passphrase info, if the key was derived from one.
     */
    var `passphraseInfo`: PassphraseInfo?, 
    /**
     * Get the full name of the backup algorithm this backup key supports.
     */
    var `backupAlgorithm`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeMegolmV1BackupKey: FfiConverterRustBuffer<MegolmV1BackupKey> {
    override fun read(buf: ByteBuffer): MegolmV1BackupKey {
        return MegolmV1BackupKey(
            FfiConverterString.read(buf),
            FfiConverterMapStringMapStringString.read(buf),
            FfiConverterOptionalTypePassphraseInfo.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MegolmV1BackupKey) = (
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterMapStringMapStringString.allocationSize(value.`signatures`) +
            FfiConverterOptionalTypePassphraseInfo.allocationSize(value.`passphraseInfo`) +
            FfiConverterString.allocationSize(value.`backupAlgorithm`)
    )

    override fun write(value: MegolmV1BackupKey, buf: ByteBuffer) {
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterMapStringMapStringString.write(value.`signatures`, buf)
            FfiConverterOptionalTypePassphraseInfo.write(value.`passphraseInfo`, buf)
            FfiConverterString.write(value.`backupAlgorithm`, buf)
    }
}



/**
 * Struct collecting data that is important to migrate to the rust-sdk
 */
data class MigrationData (
    /**
     * The pickled version of the Olm Account
     */
    var `account`: PickledAccount, 
    /**
     * The list of pickleds Olm Sessions.
     */
    var `sessions`: List<PickledSession>, 
    /**
     * The list of Megolm inbound group sessions.
     */
    var `inboundGroupSessions`: List<PickledInboundGroupSession>, 
    /**
     * The Olm pickle key that was used to pickle all the Olm objects.
     */
    var `pickleKey`: kotlin.ByteArray, 
    /**
     * The backup version that is currently active.
     */
    var `backupVersion`: kotlin.String?, 
    var `backupRecoveryKey`: kotlin.String?, 
    /**
     * The private cross signing keys.
     */
    var `crossSigning`: CrossSigningKeyExport, 
    /**
     * The list of users that the Rust SDK should track.
     */
    var `trackedUsers`: List<kotlin.String>, 
    /**
     * Map of room settings
     */
    var `roomSettings`: Map<kotlin.String, RoomSettings>
) {
    
    companion object
}

public object FfiConverterTypeMigrationData: FfiConverterRustBuffer<MigrationData> {
    override fun read(buf: ByteBuffer): MigrationData {
        return MigrationData(
            FfiConverterTypePickledAccount.read(buf),
            FfiConverterSequenceTypePickledSession.read(buf),
            FfiConverterSequenceTypePickledInboundGroupSession.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeCrossSigningKeyExport.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterMapStringTypeRoomSettings.read(buf),
        )
    }

    override fun allocationSize(value: MigrationData) = (
            FfiConverterTypePickledAccount.allocationSize(value.`account`) +
            FfiConverterSequenceTypePickledSession.allocationSize(value.`sessions`) +
            FfiConverterSequenceTypePickledInboundGroupSession.allocationSize(value.`inboundGroupSessions`) +
            FfiConverterByteArray.allocationSize(value.`pickleKey`) +
            FfiConverterOptionalString.allocationSize(value.`backupVersion`) +
            FfiConverterOptionalString.allocationSize(value.`backupRecoveryKey`) +
            FfiConverterTypeCrossSigningKeyExport.allocationSize(value.`crossSigning`) +
            FfiConverterSequenceString.allocationSize(value.`trackedUsers`) +
            FfiConverterMapStringTypeRoomSettings.allocationSize(value.`roomSettings`)
    )

    override fun write(value: MigrationData, buf: ByteBuffer) {
            FfiConverterTypePickledAccount.write(value.`account`, buf)
            FfiConverterSequenceTypePickledSession.write(value.`sessions`, buf)
            FfiConverterSequenceTypePickledInboundGroupSession.write(value.`inboundGroupSessions`, buf)
            FfiConverterByteArray.write(value.`pickleKey`, buf)
            FfiConverterOptionalString.write(value.`backupVersion`, buf)
            FfiConverterOptionalString.write(value.`backupRecoveryKey`, buf)
            FfiConverterTypeCrossSigningKeyExport.write(value.`crossSigning`, buf)
            FfiConverterSequenceString.write(value.`trackedUsers`, buf)
            FfiConverterMapStringTypeRoomSettings.write(value.`roomSettings`, buf)
    }
}



/**
 * Struct containing info about the way the backup key got derived from a
 * passphrase.
 */
data class PassphraseInfo (
    /**
     * The salt that was used during key derivation.
     */
    var `privateKeySalt`: kotlin.String, 
    /**
     * The number of PBKDF rounds that were used for key derivation.
     */
    var `privateKeyIterations`: kotlin.Int
) {
    
    companion object
}

public object FfiConverterTypePassphraseInfo: FfiConverterRustBuffer<PassphraseInfo> {
    override fun read(buf: ByteBuffer): PassphraseInfo {
        return PassphraseInfo(
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
        )
    }

    override fun allocationSize(value: PassphraseInfo) = (
            FfiConverterString.allocationSize(value.`privateKeySalt`) +
            FfiConverterInt.allocationSize(value.`privateKeyIterations`)
    )

    override fun write(value: PassphraseInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`privateKeySalt`, buf)
            FfiConverterInt.write(value.`privateKeyIterations`, buf)
    }
}



/**
 * A pickled version of an `Account`.
 *
 * Holds all the information that needs to be stored in a database to restore
 * an account.
 */
data class PickledAccount (
    /**
     * The user id of the account owner.
     */
    var `userId`: kotlin.String, 
    /**
     * The device ID of the account owner.
     */
    var `deviceId`: kotlin.String, 
    /**
     * The pickled version of the Olm account.
     */
    var `pickle`: kotlin.String, 
    /**
     * Was the account shared.
     */
    var `shared`: kotlin.Boolean, 
    /**
     * The number of uploaded one-time keys we have on the server.
     */
    var `uploadedSignedKeyCount`: kotlin.Long
) {
    
    companion object
}

public object FfiConverterTypePickledAccount: FfiConverterRustBuffer<PickledAccount> {
    override fun read(buf: ByteBuffer): PickledAccount {
        return PickledAccount(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: PickledAccount) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterString.allocationSize(value.`pickle`) +
            FfiConverterBoolean.allocationSize(value.`shared`) +
            FfiConverterLong.allocationSize(value.`uploadedSignedKeyCount`)
    )

    override fun write(value: PickledAccount, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterString.write(value.`pickle`, buf)
            FfiConverterBoolean.write(value.`shared`, buf)
            FfiConverterLong.write(value.`uploadedSignedKeyCount`, buf)
    }
}



/**
 * A pickled version of an `InboundGroupSession`.
 *
 * Holds all the information that needs to be stored in a database to restore
 * an InboundGroupSession.
 */
data class PickledInboundGroupSession (
    /**
     * The pickle string holding the InboundGroupSession.
     */
    var `pickle`: kotlin.String, 
    /**
     * The public curve25519 key of the account that sent us the session
     */
    var `senderKey`: kotlin.String, 
    /**
     * The public ed25519 key of the account that sent us the session.
     */
    var `signingKey`: Map<kotlin.String, kotlin.String>, 
    /**
     * The id of the room that the session is used in.
     */
    var `roomId`: kotlin.String, 
    /**
     * The list of claimed ed25519 that forwarded us this key. Will be empty if
     * we directly received this session.
     */
    var `forwardingChains`: List<kotlin.String>, 
    /**
     * Flag remembering if the session was directly sent to us by the sender
     * or if it was imported.
     */
    var `imported`: kotlin.Boolean, 
    /**
     * Flag remembering if the session has been backed up.
     */
    var `backedUp`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypePickledInboundGroupSession: FfiConverterRustBuffer<PickledInboundGroupSession> {
    override fun read(buf: ByteBuffer): PickledInboundGroupSession {
        return PickledInboundGroupSession(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: PickledInboundGroupSession) = (
            FfiConverterString.allocationSize(value.`pickle`) +
            FfiConverterString.allocationSize(value.`senderKey`) +
            FfiConverterMapStringString.allocationSize(value.`signingKey`) +
            FfiConverterString.allocationSize(value.`roomId`) +
            FfiConverterSequenceString.allocationSize(value.`forwardingChains`) +
            FfiConverterBoolean.allocationSize(value.`imported`) +
            FfiConverterBoolean.allocationSize(value.`backedUp`)
    )

    override fun write(value: PickledInboundGroupSession, buf: ByteBuffer) {
            FfiConverterString.write(value.`pickle`, buf)
            FfiConverterString.write(value.`senderKey`, buf)
            FfiConverterMapStringString.write(value.`signingKey`, buf)
            FfiConverterString.write(value.`roomId`, buf)
            FfiConverterSequenceString.write(value.`forwardingChains`, buf)
            FfiConverterBoolean.write(value.`imported`, buf)
            FfiConverterBoolean.write(value.`backedUp`, buf)
    }
}



/**
 * A pickled version of a `Session`.
 *
 * Holds all the information that needs to be stored in a database to restore
 * a Session.
 */
data class PickledSession (
    /**
     * The pickle string holding the Olm Session.
     */
    var `pickle`: kotlin.String, 
    /**
     * The curve25519 key of the other user that we share this session with.
     */
    var `senderKey`: kotlin.String, 
    /**
     * Was the session created using a fallback key.
     */
    var `createdUsingFallbackKey`: kotlin.Boolean, 
    /**
     * Unix timestamp (in seconds) when the session was created.
     */
    var `creationTime`: kotlin.ULong, 
    /**
     * Unix timestamp (in seconds) when the session was last used.
     */
    var `lastUseTime`: kotlin.ULong
) {
    
    companion object
}

public object FfiConverterTypePickledSession: FfiConverterRustBuffer<PickledSession> {
    override fun read(buf: ByteBuffer): PickledSession {
        return PickledSession(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: PickledSession) = (
            FfiConverterString.allocationSize(value.`pickle`) +
            FfiConverterString.allocationSize(value.`senderKey`) +
            FfiConverterBoolean.allocationSize(value.`createdUsingFallbackKey`) +
            FfiConverterULong.allocationSize(value.`creationTime`) +
            FfiConverterULong.allocationSize(value.`lastUseTime`)
    )

    override fun write(value: PickledSession, buf: ByteBuffer) {
            FfiConverterString.write(value.`pickle`, buf)
            FfiConverterString.write(value.`senderKey`, buf)
            FfiConverterBoolean.write(value.`createdUsingFallbackKey`, buf)
            FfiConverterULong.write(value.`creationTime`, buf)
            FfiConverterULong.write(value.`lastUseTime`, buf)
    }
}



/**
 * A message that was encrypted using a [`PkEncryption`] object.
 */
data class PkMessage (
    /**
     * The ciphertext of the message.
     */
    var `ciphertext`: kotlin.String, 
    /**
     * The message authentication code of the message.
     *
     * *Warning*: This does not authenticate the ciphertext.
     */
    var `mac`: kotlin.String, 
    /**
     * The ephemeral Curve25519 key of the message which was used to derive the
     * individual message key.
     */
    var `ephemeralKey`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypePkMessage: FfiConverterRustBuffer<PkMessage> {
    override fun read(buf: ByteBuffer): PkMessage {
        return PkMessage(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PkMessage) = (
            FfiConverterString.allocationSize(value.`ciphertext`) +
            FfiConverterString.allocationSize(value.`mac`) +
            FfiConverterString.allocationSize(value.`ephemeralKey`)
    )

    override fun write(value: PkMessage, buf: ByteBuffer) {
            FfiConverterString.write(value.`ciphertext`, buf)
            FfiConverterString.write(value.`mac`, buf)
            FfiConverterString.write(value.`ephemeralKey`, buf)
    }
}



/**
 * A result type for requesting verifications.
 */
data class RequestVerificationResult (
    /**
     * The verification request object that got created.
     */
    var `verification`: VerificationRequest, 
    /**
     * The request that needs to be sent out to notify the other side that
     * we're requesting verification to begin.
     */
    var `request`: OutgoingVerificationRequest
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
        Disposable.destroy(this.`verification`)
    
        Disposable.destroy(this.`request`)
    
    }
    
    companion object
}

public object FfiConverterTypeRequestVerificationResult: FfiConverterRustBuffer<RequestVerificationResult> {
    override fun read(buf: ByteBuffer): RequestVerificationResult {
        return RequestVerificationResult(
            FfiConverterTypeVerificationRequest.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: RequestVerificationResult) = (
            FfiConverterTypeVerificationRequest.allocationSize(value.`verification`) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.`request`)
    )

    override fun write(value: RequestVerificationResult, buf: ByteBuffer) {
            FfiConverterTypeVerificationRequest.write(value.`verification`, buf)
            FfiConverterTypeOutgoingVerificationRequest.write(value.`request`, buf)
    }
}



/**
 * Struct holding the number of room keys we have.
 */
data class RoomKeyCounts (
    /**
     * The total number of room keys.
     */
    var `total`: kotlin.Long, 
    /**
     * The number of backed up room keys.
     */
    var `backedUp`: kotlin.Long
) {
    
    companion object
}

public object FfiConverterTypeRoomKeyCounts: FfiConverterRustBuffer<RoomKeyCounts> {
    override fun read(buf: ByteBuffer): RoomKeyCounts {
        return RoomKeyCounts(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: RoomKeyCounts) = (
            FfiConverterLong.allocationSize(value.`total`) +
            FfiConverterLong.allocationSize(value.`backedUp`)
    )

    override fun write(value: RoomKeyCounts, buf: ByteBuffer) {
            FfiConverterLong.write(value.`total`, buf)
            FfiConverterLong.write(value.`backedUp`, buf)
    }
}



/**
 * Information on a room key that has been received or imported.
 */
data class RoomKeyInfo (
    /**
     * The [messaging algorithm] that this key is used for. Will be one of the
     * `m.megolm.*` algorithms.
     *
     * [messaging algorithm]: https://spec.matrix.org/v1.6/client-server-api/#messaging-algorithms
     */
    var `algorithm`: kotlin.String, 
    /**
     * The room where the key is used.
     */
    var `roomId`: kotlin.String, 
    /**
     * The Curve25519 key of the device which initiated the session originally.
     */
    var `senderKey`: kotlin.String, 
    /**
     * The ID of the session that the key is for.
     */
    var `sessionId`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeRoomKeyInfo: FfiConverterRustBuffer<RoomKeyInfo> {
    override fun read(buf: ByteBuffer): RoomKeyInfo {
        return RoomKeyInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: RoomKeyInfo) = (
            FfiConverterString.allocationSize(value.`algorithm`) +
            FfiConverterString.allocationSize(value.`roomId`) +
            FfiConverterString.allocationSize(value.`senderKey`) +
            FfiConverterString.allocationSize(value.`sessionId`)
    )

    override fun write(value: RoomKeyInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`algorithm`, buf)
            FfiConverterString.write(value.`roomId`, buf)
            FfiConverterString.write(value.`senderKey`, buf)
            FfiConverterString.write(value.`sessionId`, buf)
    }
}



/**
 * Room encryption settings which are modified by state events or user options
 */
data class RoomSettings (
    /**
     * The encryption algorithm that should be used in the room.
     */
    var `algorithm`: EventEncryptionAlgorithm, 
    /**
     * Should untrusted devices receive the room key, or should they be
     * excluded from the conversation.
     */
    var `onlyAllowTrustedDevices`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeRoomSettings: FfiConverterRustBuffer<RoomSettings> {
    override fun read(buf: ByteBuffer): RoomSettings {
        return RoomSettings(
            FfiConverterTypeEventEncryptionAlgorithm.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: RoomSettings) = (
            FfiConverterTypeEventEncryptionAlgorithm.allocationSize(value.`algorithm`) +
            FfiConverterBoolean.allocationSize(value.`onlyAllowTrustedDevices`)
    )

    override fun write(value: RoomSettings, buf: ByteBuffer) {
            FfiConverterTypeEventEncryptionAlgorithm.write(value.`algorithm`, buf)
            FfiConverterBoolean.write(value.`onlyAllowTrustedDevices`, buf)
    }
}



/**
 * A result type for scanning QR codes.
 */
data class ScanResult (
    /**
     * The QR code verification object that got created.
     */
    var `qr`: QrCode, 
    /**
     * The request that needs to be sent out to notify the other side that a
     * QR code verification should start.
     */
    var `request`: OutgoingVerificationRequest
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
        Disposable.destroy(this.`qr`)
    
        Disposable.destroy(this.`request`)
    
    }
    
    companion object
}

public object FfiConverterTypeScanResult: FfiConverterRustBuffer<ScanResult> {
    override fun read(buf: ByteBuffer): ScanResult {
        return ScanResult(
            FfiConverterTypeQrCode.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: ScanResult) = (
            FfiConverterTypeQrCode.allocationSize(value.`qr`) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.`request`)
    )

    override fun write(value: ScanResult, buf: ByteBuffer) {
            FfiConverterTypeQrCode.write(value.`qr`, buf)
            FfiConverterTypeOutgoingVerificationRequest.write(value.`request`, buf)
    }
}



/**
 * Struct collecting data that is important to migrate sessions to the rust-sdk
 */
data class SessionMigrationData (
    /**
     * The user id that the data belongs to.
     */
    var `userId`: kotlin.String, 
    /**
     * The device id that the data belongs to.
     */
    var `deviceId`: kotlin.String, 
    /**
     * The Curve25519 public key of the Account that owns this data.
     */
    var `curve25519Key`: kotlin.String, 
    /**
     * The Ed25519 public key of the Account that owns this data.
     */
    var `ed25519Key`: kotlin.String, 
    /**
     * The list of pickleds Olm Sessions.
     */
    var `sessions`: List<PickledSession>, 
    /**
     * The list of pickled Megolm inbound group sessions.
     */
    var `inboundGroupSessions`: List<PickledInboundGroupSession>, 
    /**
     * The Olm pickle key that was used to pickle all the Olm objects.
     */
    var `pickleKey`: kotlin.ByteArray
) {
    
    companion object
}

public object FfiConverterTypeSessionMigrationData: FfiConverterRustBuffer<SessionMigrationData> {
    override fun read(buf: ByteBuffer): SessionMigrationData {
        return SessionMigrationData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypePickledSession.read(buf),
            FfiConverterSequenceTypePickledInboundGroupSession.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: SessionMigrationData) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterString.allocationSize(value.`curve25519Key`) +
            FfiConverterString.allocationSize(value.`ed25519Key`) +
            FfiConverterSequenceTypePickledSession.allocationSize(value.`sessions`) +
            FfiConverterSequenceTypePickledInboundGroupSession.allocationSize(value.`inboundGroupSessions`) +
            FfiConverterByteArray.allocationSize(value.`pickleKey`)
    )

    override fun write(value: SessionMigrationData, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterString.write(value.`curve25519Key`, buf)
            FfiConverterString.write(value.`ed25519Key`, buf)
            FfiConverterSequenceTypePickledSession.write(value.`sessions`, buf)
            FfiConverterSequenceTypePickledInboundGroupSession.write(value.`inboundGroupSessions`, buf)
            FfiConverterByteArray.write(value.`pickleKey`, buf)
    }
}



/**
 * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]
 * for more info.
 */
data class ShieldState (
    var `color`: ShieldColor, 
    var `code`: ShieldStateCode?, 
    var `message`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeShieldState: FfiConverterRustBuffer<ShieldState> {
    override fun read(buf: ByteBuffer): ShieldState {
        return ShieldState(
            FfiConverterTypeShieldColor.read(buf),
            FfiConverterOptionalTypeShieldStateCode.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ShieldState) = (
            FfiConverterTypeShieldColor.allocationSize(value.`color`) +
            FfiConverterOptionalTypeShieldStateCode.allocationSize(value.`code`) +
            FfiConverterOptionalString.allocationSize(value.`message`)
    )

    override fun write(value: ShieldState, buf: ByteBuffer) {
            FfiConverterTypeShieldColor.write(value.`color`, buf)
            FfiConverterOptionalTypeShieldStateCode.write(value.`code`, buf)
            FfiConverterOptionalString.write(value.`message`, buf)
    }
}



data class SignatureUploadRequest (
    var `body`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeSignatureUploadRequest: FfiConverterRustBuffer<SignatureUploadRequest> {
    override fun read(buf: ByteBuffer): SignatureUploadRequest {
        return SignatureUploadRequest(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: SignatureUploadRequest) = (
            FfiConverterString.allocationSize(value.`body`)
    )

    override fun write(value: SignatureUploadRequest, buf: ByteBuffer) {
            FfiConverterString.write(value.`body`, buf)
    }
}



/**
 * The result of a signature verification of a signed JSON object.
 */
data class SignatureVerification (
    /**
     * The result of the signature verification using the public key of our own
     * device.
     */
    var `deviceSignature`: SignatureState, 
    /**
     * The result of the signature verification using the public key of our own
     * user identity.
     */
    var `userIdentitySignature`: SignatureState, 
    /**
     * The result of the signature verification using public keys of other
     * devices we own.
     */
    var `otherDevicesSignatures`: Map<kotlin.String, SignatureState>, 
    /**
     * Is the signed JSON object trusted.
     *
     * This flag tells us if the result has a valid signature from any of the
     * following:
     *
     * * Our own device
     * * Our own user identity, provided the identity is trusted as well
     * * Any of our own devices, provided the device is trusted as well
     */
    var `trusted`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeSignatureVerification: FfiConverterRustBuffer<SignatureVerification> {
    override fun read(buf: ByteBuffer): SignatureVerification {
        return SignatureVerification(
            FfiConverterTypeSignatureState.read(buf),
            FfiConverterTypeSignatureState.read(buf),
            FfiConverterMapStringTypeSignatureState.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: SignatureVerification) = (
            FfiConverterTypeSignatureState.allocationSize(value.`deviceSignature`) +
            FfiConverterTypeSignatureState.allocationSize(value.`userIdentitySignature`) +
            FfiConverterMapStringTypeSignatureState.allocationSize(value.`otherDevicesSignatures`) +
            FfiConverterBoolean.allocationSize(value.`trusted`)
    )

    override fun write(value: SignatureVerification, buf: ByteBuffer) {
            FfiConverterTypeSignatureState.write(value.`deviceSignature`, buf)
            FfiConverterTypeSignatureState.write(value.`userIdentitySignature`, buf)
            FfiConverterMapStringTypeSignatureState.write(value.`otherDevicesSignatures`, buf)
            FfiConverterBoolean.write(value.`trusted`, buf)
    }
}



/**
 * A result type for starting SAS verifications.
 */
data class StartSasResult (
    /**
     * The SAS verification object that got created.
     */
    var `sas`: Sas, 
    /**
     * The request that needs to be sent out to notify the other side that a
     * SAS verification should start.
     */
    var `request`: OutgoingVerificationRequest
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
        Disposable.destroy(this.`sas`)
    
        Disposable.destroy(this.`request`)
    
    }
    
    companion object
}

public object FfiConverterTypeStartSasResult: FfiConverterRustBuffer<StartSasResult> {
    override fun read(buf: ByteBuffer): StartSasResult {
        return StartSasResult(
            FfiConverterTypeSas.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: StartSasResult) = (
            FfiConverterTypeSas.allocationSize(value.`sas`) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.`request`)
    )

    override fun write(value: StartSasResult, buf: ByteBuffer) {
            FfiConverterTypeSas.write(value.`sas`, buf)
            FfiConverterTypeOutgoingVerificationRequest.write(value.`request`, buf)
    }
}



/**
 * The return value for the [`OlmMachine::receive_sync_changes()`] method.
 *
 * Will contain various information about the `/sync` changes the
 * [`OlmMachine`] processed.
 */
data class SyncChangesResult (
    /**
     * The, now possibly decrypted, to-device events the [`OlmMachine`]
     * received, decrypted, and processed.
     */
    var `toDeviceEvents`: List<kotlin.String>, 
    /**
     * Information about the room keys that were extracted out of the to-device
     * events.
     */
    var `roomKeyInfos`: List<RoomKeyInfo>
) {
    
    companion object
}

public object FfiConverterTypeSyncChangesResult: FfiConverterRustBuffer<SyncChangesResult> {
    override fun read(buf: ByteBuffer): SyncChangesResult {
        return SyncChangesResult(
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceTypeRoomKeyInfo.read(buf),
        )
    }

    override fun allocationSize(value: SyncChangesResult) = (
            FfiConverterSequenceString.allocationSize(value.`toDeviceEvents`) +
            FfiConverterSequenceTypeRoomKeyInfo.allocationSize(value.`roomKeyInfos`)
    )

    override fun write(value: SyncChangesResult, buf: ByteBuffer) {
            FfiConverterSequenceString.write(value.`toDeviceEvents`, buf)
            FfiConverterSequenceTypeRoomKeyInfo.write(value.`roomKeyInfos`, buf)
    }
}



data class UploadDehydratedDeviceRequest (
    /**
     * The serialized JSON body of the request.
     */
    var `body`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeUploadDehydratedDeviceRequest: FfiConverterRustBuffer<UploadDehydratedDeviceRequest> {
    override fun read(buf: ByteBuffer): UploadDehydratedDeviceRequest {
        return UploadDehydratedDeviceRequest(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: UploadDehydratedDeviceRequest) = (
            FfiConverterString.allocationSize(value.`body`)
    )

    override fun write(value: UploadDehydratedDeviceRequest, buf: ByteBuffer) {
            FfiConverterString.write(value.`body`, buf)
    }
}



data class UploadSigningKeysRequest (
    var `masterKey`: kotlin.String, 
    var `selfSigningKey`: kotlin.String, 
    var `userSigningKey`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeUploadSigningKeysRequest: FfiConverterRustBuffer<UploadSigningKeysRequest> {
    override fun read(buf: ByteBuffer): UploadSigningKeysRequest {
        return UploadSigningKeysRequest(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: UploadSigningKeysRequest) = (
            FfiConverterString.allocationSize(value.`masterKey`) +
            FfiConverterString.allocationSize(value.`selfSigningKey`) +
            FfiConverterString.allocationSize(value.`userSigningKey`)
    )

    override fun write(value: UploadSigningKeysRequest, buf: ByteBuffer) {
            FfiConverterString.write(value.`masterKey`, buf)
            FfiConverterString.write(value.`selfSigningKey`, buf)
            FfiConverterString.write(value.`userSigningKey`, buf)
    }
}



/**
 * Build-time information about important crates that are used.
 */
data class VersionInfo (
    /**
     * The version of the matrix-sdk-crypto crate.
     */
    var `version`: kotlin.String, 
    /**
     * The version of the vodozemac crate.
     */
    var `vodozemacVersion`: kotlin.String, 
    /**
     * The Git commit hash of the crate's source tree at build time.
     */
    var `gitSha`: kotlin.String, 
    /**
     * The build-time output of the `git describe` command of the source tree
     * of crate.
     */
    var `gitDescription`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeVersionInfo: FfiConverterRustBuffer<VersionInfo> {
    override fun read(buf: ByteBuffer): VersionInfo {
        return VersionInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: VersionInfo) = (
            FfiConverterString.allocationSize(value.`version`) +
            FfiConverterString.allocationSize(value.`vodozemacVersion`) +
            FfiConverterString.allocationSize(value.`gitSha`) +
            FfiConverterString.allocationSize(value.`gitDescription`)
    )

    override fun write(value: VersionInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`version`, buf)
            FfiConverterString.write(value.`vodozemacVersion`, buf)
            FfiConverterString.write(value.`gitSha`, buf)
            FfiConverterString.write(value.`gitDescription`, buf)
    }
}





sealed class CryptoStoreException(message: String): kotlin.Exception(message) {
        
        class OpenStore(message: String) : CryptoStoreException(message)
        
        class CryptoStore(message: String) : CryptoStoreException(message)
        
        class OlmException(message: String) : CryptoStoreException(message)
        
        class Serialization(message: String) : CryptoStoreException(message)
        
        class InvalidUserId(message: String) : CryptoStoreException(message)
        
        class Identifier(message: String) : CryptoStoreException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<CryptoStoreException> {
        override fun lift(error_buf: RustBuffer.ByValue): CryptoStoreException = FfiConverterTypeCryptoStoreError.lift(error_buf)
    }
}

public object FfiConverterTypeCryptoStoreError : FfiConverterRustBuffer<CryptoStoreException> {
    override fun read(buf: ByteBuffer): CryptoStoreException {
        
            return when(buf.getInt()) {
            1 -> CryptoStoreException.OpenStore(FfiConverterString.read(buf))
            2 -> CryptoStoreException.CryptoStore(FfiConverterString.read(buf))
            3 -> CryptoStoreException.OlmException(FfiConverterString.read(buf))
            4 -> CryptoStoreException.Serialization(FfiConverterString.read(buf))
            5 -> CryptoStoreException.InvalidUserId(FfiConverterString.read(buf))
            6 -> CryptoStoreException.Identifier(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: CryptoStoreException): ULong {
        return 4UL
    }

    override fun write(value: CryptoStoreException, buf: ByteBuffer) {
        when(value) {
            is CryptoStoreException.OpenStore -> {
                buf.putInt(1)
                Unit
            }
            is CryptoStoreException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
            is CryptoStoreException.OlmException -> {
                buf.putInt(3)
                Unit
            }
            is CryptoStoreException.Serialization -> {
                buf.putInt(4)
                Unit
            }
            is CryptoStoreException.InvalidUserId -> {
                buf.putInt(5)
                Unit
            }
            is CryptoStoreException.Identifier -> {
                buf.putInt(6)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * Error type for the decoding and storing of the backup key.
 */
sealed class DecodeException(message: String): kotlin.Exception(message) {
        
    /**
     * An error happened while decoding the recovery key.
     */
        class Decode(message: String) : DecodeException(message)
        
    /**
     * An error happened in the storage layer while trying to save the
     * decoded recovery key.
     */
        class CryptoStore(message: String) : DecodeException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DecodeException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecodeException = FfiConverterTypeDecodeError.lift(error_buf)
    }
}

public object FfiConverterTypeDecodeError : FfiConverterRustBuffer<DecodeException> {
    override fun read(buf: ByteBuffer): DecodeException {
        
            return when(buf.getInt()) {
            1 -> DecodeException.Decode(FfiConverterString.read(buf))
            2 -> DecodeException.CryptoStore(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: DecodeException): ULong {
        return 4UL
    }

    override fun write(value: DecodeException, buf: ByteBuffer) {
        when(value) {
            is DecodeException.Decode -> {
                buf.putInt(1)
                Unit
            }
            is DecodeException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class DecryptionException: kotlin.Exception() {
    
    class Serialization(
        
        val `error`: kotlin.String
        ) : DecryptionException() {
        override val message
            get() = "error=${ `error` }"
    }
    
    class Identifier(
        
        val `error`: kotlin.String
        ) : DecryptionException() {
        override val message
            get() = "error=${ `error` }"
    }
    
    class Megolm(
        
        val `error`: kotlin.String
        ) : DecryptionException() {
        override val message
            get() = "error=${ `error` }"
    }
    
    class MissingRoomKey(
        
        val `error`: kotlin.String, 
        
        val `withheldCode`: kotlin.String?
        ) : DecryptionException() {
        override val message
            get() = "error=${ `error` }, withheldCode=${ `withheldCode` }"
    }
    
    class Store(
        
        val `error`: kotlin.String
        ) : DecryptionException() {
        override val message
            get() = "error=${ `error` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DecryptionException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecryptionException = FfiConverterTypeDecryptionError.lift(error_buf)
    }

    
}

public object FfiConverterTypeDecryptionError : FfiConverterRustBuffer<DecryptionException> {
    override fun read(buf: ByteBuffer): DecryptionException {
        

        return when(buf.getInt()) {
            1 -> DecryptionException.Serialization(
                FfiConverterString.read(buf),
                )
            2 -> DecryptionException.Identifier(
                FfiConverterString.read(buf),
                )
            3 -> DecryptionException.Megolm(
                FfiConverterString.read(buf),
                )
            4 -> DecryptionException.MissingRoomKey(
                FfiConverterString.read(buf),
                FfiConverterOptionalString.read(buf),
                )
            5 -> DecryptionException.Store(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DecryptionException): ULong {
        return when(value) {
            is DecryptionException.Serialization -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
            is DecryptionException.Identifier -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
            is DecryptionException.Megolm -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
            is DecryptionException.MissingRoomKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`error`)
                + FfiConverterOptionalString.allocationSize(value.`withheldCode`)
            )
            is DecryptionException.Store -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
        }
    }

    override fun write(value: DecryptionException, buf: ByteBuffer) {
        when(value) {
            is DecryptionException.Serialization -> {
                buf.putInt(1)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is DecryptionException.Identifier -> {
                buf.putInt(2)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is DecryptionException.Megolm -> {
                buf.putInt(3)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is DecryptionException.MissingRoomKey -> {
                buf.putInt(4)
                FfiConverterString.write(value.`error`, buf)
                FfiConverterOptionalString.write(value.`withheldCode`, buf)
                Unit
            }
            is DecryptionException.Store -> {
                buf.putInt(5)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class DehydrationException(message: String): kotlin.Exception(message) {
        
        class Pickle(message: String) : DehydrationException(message)
        
        class MissingSigningKey(message: String) : DehydrationException(message)
        
        class Json(message: String) : DehydrationException(message)
        
        class Store(message: String) : DehydrationException(message)
        
        class PickleKeyLength(message: String) : DehydrationException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DehydrationException> {
        override fun lift(error_buf: RustBuffer.ByValue): DehydrationException = FfiConverterTypeDehydrationError.lift(error_buf)
    }
}

public object FfiConverterTypeDehydrationError : FfiConverterRustBuffer<DehydrationException> {
    override fun read(buf: ByteBuffer): DehydrationException {
        
            return when(buf.getInt()) {
            1 -> DehydrationException.Pickle(FfiConverterString.read(buf))
            2 -> DehydrationException.MissingSigningKey(FfiConverterString.read(buf))
            3 -> DehydrationException.Json(FfiConverterString.read(buf))
            4 -> DehydrationException.Store(FfiConverterString.read(buf))
            5 -> DehydrationException.PickleKeyLength(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: DehydrationException): ULong {
        return 4UL
    }

    override fun write(value: DehydrationException, buf: ByteBuffer) {
        when(value) {
            is DehydrationException.Pickle -> {
                buf.putInt(1)
                Unit
            }
            is DehydrationException.MissingSigningKey -> {
                buf.putInt(2)
                Unit
            }
            is DehydrationException.Json -> {
                buf.putInt(3)
                Unit
            }
            is DehydrationException.Store -> {
                buf.putInt(4)
                Unit
            }
            is DehydrationException.PickleKeyLength -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * An encryption algorithm to be used to encrypt messages sent to a room.
 */

enum class EventEncryptionAlgorithm {
    
    /**
     * Olm version 1 using Curve25519, AES-256, and SHA-256.
     */
    OLM_V1_CURVE25519_AES_SHA2,
    /**
     * Megolm version 1 using AES-256 and SHA-256.
     */
    MEGOLM_V1_AES_SHA2;
    companion object
}


public object FfiConverterTypeEventEncryptionAlgorithm: FfiConverterRustBuffer<EventEncryptionAlgorithm> {
    override fun read(buf: ByteBuffer) = try {
        EventEncryptionAlgorithm.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: EventEncryptionAlgorithm) = 4UL

    override fun write(value: EventEncryptionAlgorithm, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Who can see a room's history.
 */

enum class HistoryVisibility {
    
    /**
     * Previous events are accessible to newly joined members from the point
     * they were invited onwards.
     *
     * Events stop being accessible when the member's state changes to
     * something other than *invite* or *join*.
     */
    INVITED,
    /**
     * Previous events are accessible to newly joined members from the point
     * they joined the room onwards.
     * Events stop being accessible when the member's state changes to
     * something other than *join*.
     */
    JOINED,
    /**
     * Previous events are always accessible to newly joined members.
     *
     * All events in the room are accessible, even those sent when the member
     * was not a part of the room.
     */
    SHARED,
    /**
     * All events while this is the `HistoryVisibility` value may be shared by
     * any participating homeserver with anyone, regardless of whether they
     * have ever joined the room.
     */
    WORLD_READABLE;
    companion object
}


public object FfiConverterTypeHistoryVisibility: FfiConverterRustBuffer<HistoryVisibility> {
    override fun read(buf: ByteBuffer) = try {
        HistoryVisibility.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: HistoryVisibility) = 4UL

    override fun write(value: HistoryVisibility, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class KeyImportException(message: String): kotlin.Exception(message) {
        
        class Export(message: String) : KeyImportException(message)
        
        class CryptoStore(message: String) : KeyImportException(message)
        
        class Json(message: String) : KeyImportException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<KeyImportException> {
        override fun lift(error_buf: RustBuffer.ByValue): KeyImportException = FfiConverterTypeKeyImportError.lift(error_buf)
    }
}

public object FfiConverterTypeKeyImportError : FfiConverterRustBuffer<KeyImportException> {
    override fun read(buf: ByteBuffer): KeyImportException {
        
            return when(buf.getInt()) {
            1 -> KeyImportException.Export(FfiConverterString.read(buf))
            2 -> KeyImportException.CryptoStore(FfiConverterString.read(buf))
            3 -> KeyImportException.Json(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: KeyImportException): ULong {
        return 4UL
    }

    override fun write(value: KeyImportException, buf: ByteBuffer) {
        when(value) {
            is KeyImportException.Export -> {
                buf.putInt(1)
                Unit
            }
            is KeyImportException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
            is KeyImportException.Json -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * Error type for the migration process.
 */
sealed class MigrationException: kotlin.Exception() {
    
    /**
     * Generic catch all error variant.
     */
    class Generic(
        
        /**
         * The error message
         */
        val `errorMessage`: kotlin.String
        ) : MigrationException() {
        override val message
            get() = "errorMessage=${ `errorMessage` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<MigrationException> {
        override fun lift(error_buf: RustBuffer.ByValue): MigrationException = FfiConverterTypeMigrationError.lift(error_buf)
    }

    
}

public object FfiConverterTypeMigrationError : FfiConverterRustBuffer<MigrationException> {
    override fun read(buf: ByteBuffer): MigrationException {
        

        return when(buf.getInt()) {
            1 -> MigrationException.Generic(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MigrationException): ULong {
        return when(value) {
            is MigrationException.Generic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorMessage`)
            )
        }
    }

    override fun write(value: MigrationException, buf: ByteBuffer) {
        when(value) {
            is MigrationException.Generic -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorMessage`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class OutgoingVerificationRequest {
    
    data class ToDevice(
        val `requestId`: kotlin.String, 
        val `eventType`: kotlin.String, 
        val `body`: kotlin.String) : OutgoingVerificationRequest() {
        companion object
    }
    
    data class InRoom(
        val `requestId`: kotlin.String, 
        val `roomId`: kotlin.String, 
        val `eventType`: kotlin.String, 
        val `content`: kotlin.String) : OutgoingVerificationRequest() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeOutgoingVerificationRequest : FfiConverterRustBuffer<OutgoingVerificationRequest>{
    override fun read(buf: ByteBuffer): OutgoingVerificationRequest {
        return when(buf.getInt()) {
            1 -> OutgoingVerificationRequest.ToDevice(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> OutgoingVerificationRequest.InRoom(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: OutgoingVerificationRequest) = when(value) {
        is OutgoingVerificationRequest.ToDevice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
        is OutgoingVerificationRequest.InRoom -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`roomId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`content`)
            )
        }
    }

    override fun write(value: OutgoingVerificationRequest, buf: ByteBuffer) {
        when(value) {
            is OutgoingVerificationRequest.ToDevice -> {
                buf.putInt(1)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is OutgoingVerificationRequest.InRoom -> {
                buf.putInt(2)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`roomId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`content`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







/**
 * Error type for the decryption of backed up room keys.
 */
sealed class PkDecryptionException(message: String): kotlin.Exception(message) {
        
    /**
     * An internal libolm error happened during decryption.
     */
        class Olm(message: String) : PkDecryptionException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<PkDecryptionException> {
        override fun lift(error_buf: RustBuffer.ByValue): PkDecryptionException = FfiConverterTypePkDecryptionError.lift(error_buf)
    }
}

public object FfiConverterTypePkDecryptionError : FfiConverterRustBuffer<PkDecryptionException> {
    override fun read(buf: ByteBuffer): PkDecryptionException {
        
            return when(buf.getInt()) {
            1 -> PkDecryptionException.Olm(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: PkDecryptionException): ULong {
        return 4UL
    }

    override fun write(value: PkDecryptionException, buf: ByteBuffer) {
        when(value) {
            is PkDecryptionException.Olm -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * An Enum describing the state the QrCode verification is in.
 */
sealed class QrCodeState {
    
    /**
     * The QR verification has been started.
     */
    object Started : QrCodeState()
    
    
    /**
     * The QR verification has been scanned by the other side.
     */
    object Scanned : QrCodeState()
    
    
    /**
     * The scanning of the QR code has been confirmed by us.
     */
    object Confirmed : QrCodeState()
    
    
    /**
     * We have successfully scanned the QR code and are able to send a
     * reciprocation event.
     */
    object Reciprocated : QrCodeState()
    
    
    /**
     * The verification process has been successfully concluded.
     */
    object Done : QrCodeState()
    
    
    /**
     * The verification process has been cancelled.
     */
    data class Cancelled(
        /**
         * Information about the reason of the cancellation.
         */
        val `cancelInfo`: CancelInfo) : QrCodeState() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeQrCodeState : FfiConverterRustBuffer<QrCodeState>{
    override fun read(buf: ByteBuffer): QrCodeState {
        return when(buf.getInt()) {
            1 -> QrCodeState.Started
            2 -> QrCodeState.Scanned
            3 -> QrCodeState.Confirmed
            4 -> QrCodeState.Reciprocated
            5 -> QrCodeState.Done
            6 -> QrCodeState.Cancelled(
                FfiConverterTypeCancelInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: QrCodeState) = when(value) {
        is QrCodeState.Started -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is QrCodeState.Scanned -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is QrCodeState.Confirmed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is QrCodeState.Reciprocated -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is QrCodeState.Done -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is QrCodeState.Cancelled -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeCancelInfo.allocationSize(value.`cancelInfo`)
            )
        }
    }

    override fun write(value: QrCodeState, buf: ByteBuffer) {
        when(value) {
            is QrCodeState.Started -> {
                buf.putInt(1)
                Unit
            }
            is QrCodeState.Scanned -> {
                buf.putInt(2)
                Unit
            }
            is QrCodeState.Confirmed -> {
                buf.putInt(3)
                Unit
            }
            is QrCodeState.Reciprocated -> {
                buf.putInt(4)
                Unit
            }
            is QrCodeState.Done -> {
                buf.putInt(5)
                Unit
            }
            is QrCodeState.Cancelled -> {
                buf.putInt(6)
                FfiConverterTypeCancelInfo.write(value.`cancelInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class Request {
    
    data class ToDevice(
        val `requestId`: kotlin.String, 
        val `eventType`: kotlin.String, 
        val `body`: kotlin.String) : Request() {
        companion object
    }
    
    data class KeysUpload(
        val `requestId`: kotlin.String, 
        val `body`: kotlin.String) : Request() {
        companion object
    }
    
    data class KeysQuery(
        val `requestId`: kotlin.String, 
        val `users`: List<kotlin.String>) : Request() {
        companion object
    }
    
    data class KeysClaim(
        val `requestId`: kotlin.String, 
        val `oneTimeKeys`: Map<kotlin.String, Map<kotlin.String, kotlin.String>>) : Request() {
        companion object
    }
    
    data class KeysBackup(
        val `requestId`: kotlin.String, 
        val `version`: kotlin.String, 
        val `rooms`: kotlin.String) : Request() {
        companion object
    }
    
    data class RoomMessage(
        val `requestId`: kotlin.String, 
        val `roomId`: kotlin.String, 
        val `eventType`: kotlin.String, 
        val `content`: kotlin.String) : Request() {
        companion object
    }
    
    data class SignatureUpload(
        val `requestId`: kotlin.String, 
        val `body`: kotlin.String) : Request() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeRequest : FfiConverterRustBuffer<Request>{
    override fun read(buf: ByteBuffer): Request {
        return when(buf.getInt()) {
            1 -> Request.ToDevice(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> Request.KeysUpload(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> Request.KeysQuery(
                FfiConverterString.read(buf),
                FfiConverterSequenceString.read(buf),
                )
            4 -> Request.KeysClaim(
                FfiConverterString.read(buf),
                FfiConverterMapStringMapStringString.read(buf),
                )
            5 -> Request.KeysBackup(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            6 -> Request.RoomMessage(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            7 -> Request.SignatureUpload(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Request) = when(value) {
        is Request.ToDevice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
        is Request.KeysUpload -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
        is Request.KeysQuery -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterSequenceString.allocationSize(value.`users`)
            )
        }
        is Request.KeysClaim -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterMapStringMapStringString.allocationSize(value.`oneTimeKeys`)
            )
        }
        is Request.KeysBackup -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`version`)
                + FfiConverterString.allocationSize(value.`rooms`)
            )
        }
        is Request.RoomMessage -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`roomId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`content`)
            )
        }
        is Request.SignatureUpload -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
    }

    override fun write(value: Request, buf: ByteBuffer) {
        when(value) {
            is Request.ToDevice -> {
                buf.putInt(1)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is Request.KeysUpload -> {
                buf.putInt(2)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is Request.KeysQuery -> {
                buf.putInt(3)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterSequenceString.write(value.`users`, buf)
                Unit
            }
            is Request.KeysClaim -> {
                buf.putInt(4)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterMapStringMapStringString.write(value.`oneTimeKeys`, buf)
                Unit
            }
            is Request.KeysBackup -> {
                buf.putInt(5)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`version`, buf)
                FfiConverterString.write(value.`rooms`, buf)
                Unit
            }
            is Request.RoomMessage -> {
                buf.putInt(6)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`roomId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`content`, buf)
                Unit
            }
            is Request.SignatureUpload -> {
                buf.putInt(7)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class RequestType {
    
    KEYS_QUERY,
    KEYS_CLAIM,
    KEYS_UPLOAD,
    TO_DEVICE,
    SIGNATURE_UPLOAD,
    KEYS_BACKUP,
    ROOM_MESSAGE;
    companion object
}


public object FfiConverterTypeRequestType: FfiConverterRustBuffer<RequestType> {
    override fun read(buf: ByteBuffer) = try {
        RequestType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RequestType) = 4UL

    override fun write(value: RequestType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * An Enum describing the state the SAS verification is in.
 */
sealed class SasState {
    
    /**
     * The verification has been created, the protocols that should be used
     * have been proposed to the other party.
     */
    object Created : SasState()
    
    
    /**
     * The verification has been started, the other party proposed the
     * protocols that should be used and that can be accepted.
     */
    object Started : SasState()
    
    
    /**
     * The verification has been accepted and both sides agreed to a set of
     * protocols that will be used for the verification process.
     */
    object Accepted : SasState()
    
    
    /**
     * The public keys have been exchanged and the short auth string can be
     * presented to the user.
     */
    data class KeysExchanged(
        /**
         * The emojis that represent the short auth string, will be `None` if
         * the emoji SAS method wasn't one of accepted protocols.
         */
        val `emojis`: List<kotlin.Int>?, 
        /**
         * The list of decimals that represent the short auth string.
         */
        val `decimals`: List<kotlin.Int>) : SasState() {
        companion object
    }
    
    /**
     * The verification process has been confirmed from our side, we're waiting
     * for the other side to confirm as well.
     */
    object Confirmed : SasState()
    
    
    /**
     * The verification process has been successfully concluded.
     */
    object Done : SasState()
    
    
    /**
     * The verification process has been cancelled.
     */
    data class Cancelled(
        /**
         * Information about the reason of the cancellation.
         */
        val `cancelInfo`: CancelInfo) : SasState() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeSasState : FfiConverterRustBuffer<SasState>{
    override fun read(buf: ByteBuffer): SasState {
        return when(buf.getInt()) {
            1 -> SasState.Created
            2 -> SasState.Started
            3 -> SasState.Accepted
            4 -> SasState.KeysExchanged(
                FfiConverterOptionalSequenceInt.read(buf),
                FfiConverterSequenceInt.read(buf),
                )
            5 -> SasState.Confirmed
            6 -> SasState.Done
            7 -> SasState.Cancelled(
                FfiConverterTypeCancelInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SasState) = when(value) {
        is SasState.Created -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is SasState.Started -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is SasState.Accepted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is SasState.KeysExchanged -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterOptionalSequenceInt.allocationSize(value.`emojis`)
                + FfiConverterSequenceInt.allocationSize(value.`decimals`)
            )
        }
        is SasState.Confirmed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is SasState.Done -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is SasState.Cancelled -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeCancelInfo.allocationSize(value.`cancelInfo`)
            )
        }
    }

    override fun write(value: SasState, buf: ByteBuffer) {
        when(value) {
            is SasState.Created -> {
                buf.putInt(1)
                Unit
            }
            is SasState.Started -> {
                buf.putInt(2)
                Unit
            }
            is SasState.Accepted -> {
                buf.putInt(3)
                Unit
            }
            is SasState.KeysExchanged -> {
                buf.putInt(4)
                FfiConverterOptionalSequenceInt.write(value.`emojis`, buf)
                FfiConverterSequenceInt.write(value.`decimals`, buf)
                Unit
            }
            is SasState.Confirmed -> {
                buf.putInt(5)
                Unit
            }
            is SasState.Done -> {
                buf.putInt(6)
                Unit
            }
            is SasState.Cancelled -> {
                buf.putInt(7)
                FfiConverterTypeCancelInfo.write(value.`cancelInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class SecretImportException(message: String): kotlin.Exception(message) {
        
        class CryptoStore(message: String) : SecretImportException(message)
        
        class Import(message: String) : SecretImportException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SecretImportException> {
        override fun lift(error_buf: RustBuffer.ByValue): SecretImportException = FfiConverterTypeSecretImportError.lift(error_buf)
    }
}

public object FfiConverterTypeSecretImportError : FfiConverterRustBuffer<SecretImportException> {
    override fun read(buf: ByteBuffer): SecretImportException {
        
            return when(buf.getInt()) {
            1 -> SecretImportException.CryptoStore(FfiConverterString.read(buf))
            2 -> SecretImportException.Import(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SecretImportException): ULong {
        return 4UL
    }

    override fun write(value: SecretImportException, buf: ByteBuffer) {
        when(value) {
            is SecretImportException.CryptoStore -> {
                buf.putInt(1)
                Unit
            }
            is SecretImportException.Import -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]
 * for more info.
 */

enum class ShieldColor {
    
    RED,
    GREY,
    NONE;
    companion object
}


public object FfiConverterTypeShieldColor: FfiConverterRustBuffer<ShieldColor> {
    override fun read(buf: ByteBuffer) = try {
        ShieldColor.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ShieldColor) = 4UL

    override fun write(value: ShieldColor, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class SignatureException(message: String): kotlin.Exception(message) {
        
        class Signature(message: String) : SignatureException(message)
        
        class Identifier(message: String) : SignatureException(message)
        
        class CryptoStore(message: String) : SignatureException(message)
        
        class UnknownDevice(message: String) : SignatureException(message)
        
        class UnknownUserIdentity(message: String) : SignatureException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SignatureException> {
        override fun lift(error_buf: RustBuffer.ByValue): SignatureException = FfiConverterTypeSignatureError.lift(error_buf)
    }
}

public object FfiConverterTypeSignatureError : FfiConverterRustBuffer<SignatureException> {
    override fun read(buf: ByteBuffer): SignatureException {
        
            return when(buf.getInt()) {
            1 -> SignatureException.Signature(FfiConverterString.read(buf))
            2 -> SignatureException.Identifier(FfiConverterString.read(buf))
            3 -> SignatureException.CryptoStore(FfiConverterString.read(buf))
            4 -> SignatureException.UnknownDevice(FfiConverterString.read(buf))
            5 -> SignatureException.UnknownUserIdentity(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SignatureException): ULong {
        return 4UL
    }

    override fun write(value: SignatureException, buf: ByteBuffer) {
        when(value) {
            is SignatureException.Signature -> {
                buf.putInt(1)
                Unit
            }
            is SignatureException.Identifier -> {
                buf.putInt(2)
                Unit
            }
            is SignatureException.CryptoStore -> {
                buf.putInt(3)
                Unit
            }
            is SignatureException.UnknownDevice -> {
                buf.putInt(4)
                Unit
            }
            is SignatureException.UnknownUserIdentity -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * Enum representing cross signing identities of our own user or some other
 * user.
 */
sealed class UserIdentity {
    
    /**
     * Our own user identity.
     */
    data class Own(
        /**
         * The unique id of our own user.
         */
        val `userId`: kotlin.String, 
        /**
         * Does our own user identity trust our own device.
         */
        val `trustsOurOwnDevice`: kotlin.Boolean, 
        /**
         * The public master key of our identity.
         */
        val `masterKey`: kotlin.String, 
        /**
         * The public user-signing key of our identity.
         */
        val `userSigningKey`: kotlin.String, 
        /**
         * The public self-signing key of our identity.
         */
        val `selfSigningKey`: kotlin.String) : UserIdentity() {
        companion object
    }
    
    /**
     * The user identity of other users.
     */
    data class Other(
        /**
         * The unique id of the user.
         */
        val `userId`: kotlin.String, 
        /**
         * The public master key of the identity.
         */
        val `masterKey`: kotlin.String, 
        /**
         * The public self-signing key of our identity.
         */
        val `selfSigningKey`: kotlin.String) : UserIdentity() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeUserIdentity : FfiConverterRustBuffer<UserIdentity>{
    override fun read(buf: ByteBuffer): UserIdentity {
        return when(buf.getInt()) {
            1 -> UserIdentity.Own(
                FfiConverterString.read(buf),
                FfiConverterBoolean.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> UserIdentity.Other(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: UserIdentity) = when(value) {
        is UserIdentity.Own -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`userId`)
                + FfiConverterBoolean.allocationSize(value.`trustsOurOwnDevice`)
                + FfiConverterString.allocationSize(value.`masterKey`)
                + FfiConverterString.allocationSize(value.`userSigningKey`)
                + FfiConverterString.allocationSize(value.`selfSigningKey`)
            )
        }
        is UserIdentity.Other -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`userId`)
                + FfiConverterString.allocationSize(value.`masterKey`)
                + FfiConverterString.allocationSize(value.`selfSigningKey`)
            )
        }
    }

    override fun write(value: UserIdentity, buf: ByteBuffer) {
        when(value) {
            is UserIdentity.Own -> {
                buf.putInt(1)
                FfiConverterString.write(value.`userId`, buf)
                FfiConverterBoolean.write(value.`trustsOurOwnDevice`, buf)
                FfiConverterString.write(value.`masterKey`, buf)
                FfiConverterString.write(value.`userSigningKey`, buf)
                FfiConverterString.write(value.`selfSigningKey`, buf)
                Unit
            }
            is UserIdentity.Other -> {
                buf.putInt(2)
                FfiConverterString.write(value.`userId`, buf)
                FfiConverterString.write(value.`masterKey`, buf)
                FfiConverterString.write(value.`selfSigningKey`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





/**
 * An Enum describing the state the QrCode verification is in.
 */
sealed class VerificationRequestState {
    
    /**
     * The verification request was sent
     */
    object Requested : VerificationRequestState()
    
    
    /**
     * The verification request is ready to start a verification flow.
     */
    data class Ready(
        /**
         * The verification methods supported by the other side.
         */
        val `theirMethods`: List<kotlin.String>, 
        /**
         * The verification methods supported by the us.
         */
        val `ourMethods`: List<kotlin.String>) : VerificationRequestState() {
        companion object
    }
    
    /**
     * The verification flow that was started with this request has finished.
     */
    object Done : VerificationRequestState()
    
    
    /**
     * The verification process has been cancelled.
     */
    data class Cancelled(
        /**
         * Information about the reason of the cancellation.
         */
        val `cancelInfo`: CancelInfo) : VerificationRequestState() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeVerificationRequestState : FfiConverterRustBuffer<VerificationRequestState>{
    override fun read(buf: ByteBuffer): VerificationRequestState {
        return when(buf.getInt()) {
            1 -> VerificationRequestState.Requested
            2 -> VerificationRequestState.Ready(
                FfiConverterSequenceString.read(buf),
                FfiConverterSequenceString.read(buf),
                )
            3 -> VerificationRequestState.Done
            4 -> VerificationRequestState.Cancelled(
                FfiConverterTypeCancelInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: VerificationRequestState) = when(value) {
        is VerificationRequestState.Requested -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is VerificationRequestState.Ready -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceString.allocationSize(value.`theirMethods`)
                + FfiConverterSequenceString.allocationSize(value.`ourMethods`)
            )
        }
        is VerificationRequestState.Done -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is VerificationRequestState.Cancelled -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeCancelInfo.allocationSize(value.`cancelInfo`)
            )
        }
    }

    override fun write(value: VerificationRequestState, buf: ByteBuffer) {
        when(value) {
            is VerificationRequestState.Requested -> {
                buf.putInt(1)
                Unit
            }
            is VerificationRequestState.Ready -> {
                buf.putInt(2)
                FfiConverterSequenceString.write(value.`theirMethods`, buf)
                FfiConverterSequenceString.write(value.`ourMethods`, buf)
                Unit
            }
            is VerificationRequestState.Done -> {
                buf.putInt(3)
                Unit
            }
            is VerificationRequestState.Cancelled -> {
                buf.putInt(4)
                FfiConverterTypeCancelInfo.write(value.`cancelInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







/**
 * Trait that can be used to forward Rust logs over FFI to a language specific
 * logger.
 */
public interface Logger {
    
    /**
     * Called every time the Rust side wants to post a log line.
     */
    fun `log`(`logLine`: kotlin.String)
    
    companion object
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceLogger {
    internal object `log`: UniffiCallbackInterfaceLoggerMethod0 {
        override fun callback(`uniffiHandle`: Long,`logLine`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeLogger.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`log`(
                    FfiConverterString.lift(`logLine`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeLogger.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceLogger.UniffiByValue(
        `log`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_logger(vtable)
    }
}

// The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
public object FfiConverterTypeLogger: FfiConverterCallbackInterface<Logger>()





/**
 * Callback that will be passed over the FFI to report progress
 */
public interface ProgressListener {
    
    /**
     * The callback that should be called on the Rust side
     *
     * # Arguments
     *
     * * `progress` - The current number of items that have been handled
     *
     * * `total` - The total number of items that will be handled
     */
    fun `onProgress`(`progress`: kotlin.Int, `total`: kotlin.Int)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceProgressListener {
    internal object `onProgress`: UniffiCallbackInterfaceProgressListenerMethod0 {
        override fun callback(`uniffiHandle`: Long,`progress`: Int,`total`: Int,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeProgressListener.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onProgress`(
                    FfiConverterInt.lift(`progress`),
                    FfiConverterInt.lift(`total`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeProgressListener.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceProgressListener.UniffiByValue(
        `onProgress`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_progresslistener(vtable)
    }
}

// The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
public object FfiConverterTypeProgressListener: FfiConverterCallbackInterface<ProgressListener>()





/**
 * Listener that will be passed over the FFI to report changes to a QrCode
 * verification.
 */
public interface QrCodeListener {
    
    /**
     * The callback that should be called on the Rust side
     *
     * # Arguments
     *
     * * `state` - The current state of the QrCode verification.
     */
    fun `onChange`(`state`: QrCodeState)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceQrCodeListener {
    internal object `onChange`: UniffiCallbackInterfaceQrCodeListenerMethod0 {
        override fun callback(`uniffiHandle`: Long,`state`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeQrCodeListener.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onChange`(
                    FfiConverterTypeQrCodeState.lift(`state`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeQrCodeListener.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceQrCodeListener.UniffiByValue(
        `onChange`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_qrcodelistener(vtable)
    }
}

// The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
public object FfiConverterTypeQrCodeListener: FfiConverterCallbackInterface<QrCodeListener>()





/**
 * Listener that will be passed over the FFI to report changes to a SAS
 * verification.
 */
public interface SasListener {
    
    /**
     * The callback that should be called on the Rust side
     *
     * # Arguments
     *
     * * `state` - The current state of the SAS verification.
     */
    fun `onChange`(`state`: SasState)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceSasListener {
    internal object `onChange`: UniffiCallbackInterfaceSasListenerMethod0 {
        override fun callback(`uniffiHandle`: Long,`state`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSasListener.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onChange`(
                    FfiConverterTypeSasState.lift(`state`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeSasListener.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceSasListener.UniffiByValue(
        `onChange`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_saslistener(vtable)
    }
}

// The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
public object FfiConverterTypeSasListener: FfiConverterCallbackInterface<SasListener>()





/**
 * Listener that will be passed over the FFI to report changes to a
 * verification request.
 */
public interface VerificationRequestListener {
    
    /**
     * The callback that should be called on the Rust side
     *
     * # Arguments
     *
     * * `state` - The current state of the verification request.
     */
    fun `onChange`(`state`: VerificationRequestState)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceVerificationRequestListener {
    internal object `onChange`: UniffiCallbackInterfaceVerificationRequestListenerMethod0 {
        override fun callback(`uniffiHandle`: Long,`state`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeVerificationRequestListener.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onChange`(
                    FfiConverterTypeVerificationRequestState.lift(`state`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeVerificationRequestListener.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceVerificationRequestListener.UniffiByValue(
        `onChange`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_matrix_sdk_crypto_ffi_fn_init_callback_vtable_verificationrequestlistener(vtable)
    }
}

// The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
public object FfiConverterTypeVerificationRequestListener: FfiConverterCallbackInterface<VerificationRequestListener>()




public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeBackupKeys: FfiConverterRustBuffer<BackupKeys?> {
    override fun read(buf: ByteBuffer): BackupKeys? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBackupKeys.read(buf)
    }

    override fun allocationSize(value: BackupKeys?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeBackupKeys.allocationSize(value)
        }
    }

    override fun write(value: BackupKeys?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBackupKeys.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeBackupRecoveryKey: FfiConverterRustBuffer<BackupRecoveryKey?> {
    override fun read(buf: ByteBuffer): BackupRecoveryKey? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBackupRecoveryKey.read(buf)
    }

    override fun allocationSize(value: BackupRecoveryKey?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeBackupRecoveryKey.allocationSize(value)
        }
    }

    override fun write(value: BackupRecoveryKey?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBackupRecoveryKey.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeQrCode: FfiConverterRustBuffer<QrCode?> {
    override fun read(buf: ByteBuffer): QrCode? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeQrCode.read(buf)
    }

    override fun allocationSize(value: QrCode?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeQrCode.allocationSize(value)
        }
    }

    override fun write(value: QrCode?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeQrCode.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSas: FfiConverterRustBuffer<Sas?> {
    override fun read(buf: ByteBuffer): Sas? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSas.read(buf)
    }

    override fun allocationSize(value: Sas?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeSas.allocationSize(value)
        }
    }

    override fun write(value: Sas?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSas.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeVerification: FfiConverterRustBuffer<Verification?> {
    override fun read(buf: ByteBuffer): Verification? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVerification.read(buf)
    }

    override fun allocationSize(value: Verification?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeVerification.allocationSize(value)
        }
    }

    override fun write(value: Verification?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVerification.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeVerificationRequest: FfiConverterRustBuffer<VerificationRequest?> {
    override fun read(buf: ByteBuffer): VerificationRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVerificationRequest.read(buf)
    }

    override fun allocationSize(value: VerificationRequest?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeVerificationRequest.allocationSize(value)
        }
    }

    override fun write(value: VerificationRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVerificationRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCancelInfo: FfiConverterRustBuffer<CancelInfo?> {
    override fun read(buf: ByteBuffer): CancelInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCancelInfo.read(buf)
    }

    override fun allocationSize(value: CancelInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCancelInfo.allocationSize(value)
        }
    }

    override fun write(value: CancelInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCancelInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeConfirmVerificationResult: FfiConverterRustBuffer<ConfirmVerificationResult?> {
    override fun read(buf: ByteBuffer): ConfirmVerificationResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeConfirmVerificationResult.read(buf)
    }

    override fun allocationSize(value: ConfirmVerificationResult?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeConfirmVerificationResult.allocationSize(value)
        }
    }

    override fun write(value: ConfirmVerificationResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeConfirmVerificationResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCrossSigningKeyExport: FfiConverterRustBuffer<CrossSigningKeyExport?> {
    override fun read(buf: ByteBuffer): CrossSigningKeyExport? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCrossSigningKeyExport.read(buf)
    }

    override fun allocationSize(value: CrossSigningKeyExport?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCrossSigningKeyExport.allocationSize(value)
        }
    }

    override fun write(value: CrossSigningKeyExport?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCrossSigningKeyExport.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeDevice: FfiConverterRustBuffer<Device?> {
    override fun read(buf: ByteBuffer): Device? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDevice.read(buf)
    }

    override fun allocationSize(value: Device?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeDevice.allocationSize(value)
        }
    }

    override fun write(value: Device?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDevice.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePassphraseInfo: FfiConverterRustBuffer<PassphraseInfo?> {
    override fun read(buf: ByteBuffer): PassphraseInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePassphraseInfo.read(buf)
    }

    override fun allocationSize(value: PassphraseInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypePassphraseInfo.allocationSize(value)
        }
    }

    override fun write(value: PassphraseInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePassphraseInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRequestVerificationResult: FfiConverterRustBuffer<RequestVerificationResult?> {
    override fun read(buf: ByteBuffer): RequestVerificationResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRequestVerificationResult.read(buf)
    }

    override fun allocationSize(value: RequestVerificationResult?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeRequestVerificationResult.allocationSize(value)
        }
    }

    override fun write(value: RequestVerificationResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRequestVerificationResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRoomSettings: FfiConverterRustBuffer<RoomSettings?> {
    override fun read(buf: ByteBuffer): RoomSettings? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRoomSettings.read(buf)
    }

    override fun allocationSize(value: RoomSettings?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeRoomSettings.allocationSize(value)
        }
    }

    override fun write(value: RoomSettings?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRoomSettings.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeScanResult: FfiConverterRustBuffer<ScanResult?> {
    override fun read(buf: ByteBuffer): ScanResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeScanResult.read(buf)
    }

    override fun allocationSize(value: ScanResult?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeScanResult.allocationSize(value)
        }
    }

    override fun write(value: ScanResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeScanResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSignatureUploadRequest: FfiConverterRustBuffer<SignatureUploadRequest?> {
    override fun read(buf: ByteBuffer): SignatureUploadRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSignatureUploadRequest.read(buf)
    }

    override fun allocationSize(value: SignatureUploadRequest?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeSignatureUploadRequest.allocationSize(value)
        }
    }

    override fun write(value: SignatureUploadRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSignatureUploadRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeStartSasResult: FfiConverterRustBuffer<StartSasResult?> {
    override fun read(buf: ByteBuffer): StartSasResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeStartSasResult.read(buf)
    }

    override fun allocationSize(value: StartSasResult?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeStartSasResult.allocationSize(value)
        }
    }

    override fun write(value: StartSasResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeStartSasResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeOutgoingVerificationRequest: FfiConverterRustBuffer<OutgoingVerificationRequest?> {
    override fun read(buf: ByteBuffer): OutgoingVerificationRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeOutgoingVerificationRequest.read(buf)
    }

    override fun allocationSize(value: OutgoingVerificationRequest?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeOutgoingVerificationRequest.allocationSize(value)
        }
    }

    override fun write(value: OutgoingVerificationRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeOutgoingVerificationRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRequest: FfiConverterRustBuffer<Request?> {
    override fun read(buf: ByteBuffer): Request? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRequest.read(buf)
    }

    override fun allocationSize(value: Request?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeRequest.allocationSize(value)
        }
    }

    override fun write(value: Request?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUserIdentity: FfiConverterRustBuffer<UserIdentity?> {
    override fun read(buf: ByteBuffer): UserIdentity? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUserIdentity.read(buf)
    }

    override fun allocationSize(value: UserIdentity?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeUserIdentity.allocationSize(value)
        }
    }

    override fun write(value: UserIdentity?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUserIdentity.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceInt: FfiConverterRustBuffer<List<kotlin.Int>?> {
    override fun read(buf: ByteBuffer): List<kotlin.Int>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceInt.read(buf)
    }

    override fun allocationSize(value: List<kotlin.Int>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceInt.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.Int>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeShieldStateCode: FfiConverterRustBuffer<ShieldStateCode?> {
    override fun read(buf: ByteBuffer): ShieldStateCode? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeShieldStateCode.read(buf)
    }

    override fun allocationSize(value: ShieldStateCode?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeShieldStateCode.allocationSize(value)
        }
    }

    override fun write(value: ShieldStateCode?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeShieldStateCode.write(value, buf)
        }
    }
}




public object FfiConverterSequenceInt: FfiConverterRustBuffer<List<kotlin.Int>> {
    override fun read(buf: ByteBuffer): List<kotlin.Int> {
        val len = buf.getInt()
        return List<kotlin.Int>(len) {
            FfiConverterInt.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.Int>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterInt.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.Int>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterInt.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeVerificationRequest: FfiConverterRustBuffer<List<VerificationRequest>> {
    override fun read(buf: ByteBuffer): List<VerificationRequest> {
        val len = buf.getInt()
        return List<VerificationRequest>(len) {
            FfiConverterTypeVerificationRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<VerificationRequest>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeVerificationRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<VerificationRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeVerificationRequest.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeDevice: FfiConverterRustBuffer<List<Device>> {
    override fun read(buf: ByteBuffer): List<Device> {
        val len = buf.getInt()
        return List<Device>(len) {
            FfiConverterTypeDevice.read(buf)
        }
    }

    override fun allocationSize(value: List<Device>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeDevice.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Device>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeDevice.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePickledInboundGroupSession: FfiConverterRustBuffer<List<PickledInboundGroupSession>> {
    override fun read(buf: ByteBuffer): List<PickledInboundGroupSession> {
        val len = buf.getInt()
        return List<PickledInboundGroupSession>(len) {
            FfiConverterTypePickledInboundGroupSession.read(buf)
        }
    }

    override fun allocationSize(value: List<PickledInboundGroupSession>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePickledInboundGroupSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PickledInboundGroupSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePickledInboundGroupSession.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePickledSession: FfiConverterRustBuffer<List<PickledSession>> {
    override fun read(buf: ByteBuffer): List<PickledSession> {
        val len = buf.getInt()
        return List<PickledSession>(len) {
            FfiConverterTypePickledSession.read(buf)
        }
    }

    override fun allocationSize(value: List<PickledSession>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePickledSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PickledSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePickledSession.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRoomKeyInfo: FfiConverterRustBuffer<List<RoomKeyInfo>> {
    override fun read(buf: ByteBuffer): List<RoomKeyInfo> {
        val len = buf.getInt()
        return List<RoomKeyInfo>(len) {
            FfiConverterTypeRoomKeyInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<RoomKeyInfo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRoomKeyInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RoomKeyInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRoomKeyInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeOutgoingVerificationRequest: FfiConverterRustBuffer<List<OutgoingVerificationRequest>> {
    override fun read(buf: ByteBuffer): List<OutgoingVerificationRequest> {
        val len = buf.getInt()
        return List<OutgoingVerificationRequest>(len) {
            FfiConverterTypeOutgoingVerificationRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<OutgoingVerificationRequest>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeOutgoingVerificationRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<OutgoingVerificationRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeOutgoingVerificationRequest.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRequest: FfiConverterRustBuffer<List<Request>> {
    override fun read(buf: ByteBuffer): List<Request> {
        val len = buf.getInt()
        return List<Request>(len) {
            FfiConverterTypeRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<Request>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Request>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRequest.write(it, buf)
        }
    }
}



public object FfiConverterMapStringInt: FfiConverterRustBuffer<Map<kotlin.String, kotlin.Int>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.Int> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.Int>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterInt.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.Int>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterInt.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.Int>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterInt.write(v, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringTypeRoomSettings: FfiConverterRustBuffer<Map<kotlin.String, RoomSettings>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, RoomSettings> {
        val len = buf.getInt()
        return buildMap<kotlin.String, RoomSettings>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterTypeRoomSettings.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, RoomSettings>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeRoomSettings.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, RoomSettings>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeRoomSettings.write(v, buf)
        }
    }
}



public object FfiConverterMapStringSequenceString: FfiConverterRustBuffer<Map<kotlin.String, List<kotlin.String>>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, List<kotlin.String>> {
        val len = buf.getInt()
        return buildMap<kotlin.String, List<kotlin.String>>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterSequenceString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, List<kotlin.String>>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterSequenceString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, List<kotlin.String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringMapStringString: FfiConverterRustBuffer<Map<kotlin.String, Map<kotlin.String, kotlin.String>>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, Map<kotlin.String, kotlin.String>> {
        val len = buf.getInt()
        return buildMap<kotlin.String, Map<kotlin.String, kotlin.String>>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterMapStringString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, Map<kotlin.String, kotlin.String>>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterMapStringString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, Map<kotlin.String, kotlin.String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterMapStringString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringMapStringSequenceString: FfiConverterRustBuffer<Map<kotlin.String, Map<kotlin.String, List<kotlin.String>>>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, Map<kotlin.String, List<kotlin.String>>> {
        val len = buf.getInt()
        return buildMap<kotlin.String, Map<kotlin.String, List<kotlin.String>>>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterMapStringSequenceString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, Map<kotlin.String, List<kotlin.String>>>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterMapStringSequenceString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, Map<kotlin.String, List<kotlin.String>>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterMapStringSequenceString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringTypeSignatureState: FfiConverterRustBuffer<Map<kotlin.String, SignatureState>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, SignatureState> {
        val len = buf.getInt()
        return buildMap<kotlin.String, SignatureState>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterTypeSignatureState.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, SignatureState>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeSignatureState.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, SignatureState>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeSignatureState.write(v, buf)
        }
    }
}












        /**
         * Migrate a libolm based setup to a vodozemac based setup stored in a SQLite
         * store.
         *
         * # Arguments
         *
         * * `data` - The data that should be migrated over to the SQLite store.
         *
         * * `path` - The path where the SQLite store should be created.
         *
         * * `passphrase` - The passphrase that should be used to encrypt the data at
         * rest in the SQLite store. **Warning**, if no passphrase is given, the
         * store and all its data will remain unencrypted.
         *
         * * `progress_listener` - A callback that can be used to introspect the
         * progress of the migration.
         */
    @Throws(MigrationException::class) fun `migrate`(`data`: MigrationData, `path`: kotlin.String, `passphrase`: kotlin.String?, `progressListener`: ProgressListener)
        = 
    uniffiRustCallWithError(MigrationException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_migrate(
        FfiConverterTypeMigrationData.lower(`data`),FfiConverterString.lower(`path`),FfiConverterOptionalString.lower(`passphrase`),FfiConverterTypeProgressListener.lower(`progressListener`),_status)
}
    
    

        /**
         * Migrate room settings, including room algorithm and whether to block
         * untrusted devices from legacy store to Sqlite store.
         *
         * Note that this method should only be used if a client has already migrated
         * account data via [migrate](#method.migrate) method, which did not include
         * room settings. For a brand new migration, the [migrate](#method.migrate)
         * method will take care of room settings automatically, if provided.
         *
         * # Arguments
         *
         * * `room_settings` - Map of room settings
         *
         * * `path` - The path where the Sqlite store should be created.
         *
         * * `passphrase` - The passphrase that should be used to encrypt the data at
         * rest in the Sqlite store. **Warning**, if no passphrase is given, the
         * store and all its data will remain unencrypted.
         */
    @Throws(MigrationException::class) fun `migrateRoomSettings`(`roomSettings`: Map<kotlin.String, RoomSettings>, `path`: kotlin.String, `passphrase`: kotlin.String?)
        = 
    uniffiRustCallWithError(MigrationException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_migrate_room_settings(
        FfiConverterMapStringTypeRoomSettings.lower(`roomSettings`),FfiConverterString.lower(`path`),FfiConverterOptionalString.lower(`passphrase`),_status)
}
    
    

        /**
         * Migrate sessions and group sessions of a libolm based setup to a vodozemac
         * based setup stored in a SQLite store.
         *
         * This method allows you to migrate a subset of the data, it should only be
         * used after the [`migrate()`] method has been already used.
         *
         * # Arguments
         *
         * * `data` - The data that should be migrated over to the SQLite store.
         *
         * * `path` - The path where the SQLite store should be created.
         *
         * * `passphrase` - The passphrase that should be used to encrypt the data at
         * rest in the SQLite store. **Warning**, if no passphrase is given, the
         * store and all its data will remain unencrypted.
         *
         * * `progress_listener` - A callback that can be used to introspect the
         * progress of the migration.
         */
    @Throws(MigrationException::class) fun `migrateSessions`(`data`: SessionMigrationData, `path`: kotlin.String, `passphrase`: kotlin.String?, `progressListener`: ProgressListener)
        = 
    uniffiRustCallWithError(MigrationException) { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_migrate_sessions(
        FfiConverterTypeSessionMigrationData.lower(`data`),FfiConverterString.lower(`path`),FfiConverterOptionalString.lower(`passphrase`),FfiConverterTypeProgressListener.lower(`progressListener`),_status)
}
    
    

        /**
         * Set the logger that should be used to forward Rust logs over FFI.
         */ fun `setLogger`(`logger`: Logger)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_set_logger(
        FfiConverterTypeLogger.lower(`logger`),_status)
}
    
    
 fun `version`(): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_version(
        _status)
}
    )
    }
    
 fun `versionInfo`(): VersionInfo {
            return FfiConverterTypeVersionInfo.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_version_info(
        _status)
}
    )
    }
    
 fun `vodozemacVersion`(): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_crypto_ffi_fn_func_vodozemac_version(
        _status)
}
    )
    }
    


